[{"content":" Everyone deserves to own a blog. I\u0026rsquo;m here to help. There are numerous ways to build a blog. You can choose popular platforms like WordPress, Medium, or Notion for simplicity, or craft static web pages using frameworks like Hugo and Hexo if you\u0026rsquo;re comfortable with a touch of coding. My personal preference leans toward the latter because it offers greater customization, cost-effectiveness, and stability. If you\u0026rsquo;re curious about selecting the right blogging tool for you, you can also check out this Chinese blog written by Douchi for valuable insights.\nThis article is written for people who are interested in creating a blog on their own but have minimal coding experience. It focuses on using Hugo and GitHub as the main tools for creating a blog. Hugo offers hundreds of themes with diverse styles and functions that you can explore to suit your personal needs. I would recommend the Blowfish theme, which is one of the most advanced and flexible themes in Hugo with attractive layout and detailed documentation. If you prefer to use a different theme, simply refer to the documentation of your chosen theme when it comes to theme-specific steps.\nPrerequisites # No prior background knowledge is needed. I will try to explain everything in the procedures and feel free to leave a comment if you have any questions during the setup.\nHowever, to ensure a smooth follow-along experience, please complete the following steps before getting started:\nSign up for a GitHub Account and generate a personal access token following this tutorial Copy the token and store it somewhere else, because you won\u0026rsquo;t be able to see it again on GitHub. Download a code editor if you don\u0026rsquo;t have one Visual Studio Code, recommended for individuals with long-term coding needs Sublime Text, recommended for beginners Install Git on your system You can check whether Git is already installed by running git --version in the terminal If you\u0026rsquo;re a Mac user, please install homebrew first, which will make your life much easier For coding newbies, the installation steps are essentially copying and pasting commands into the terminal. You can find the macOS Terminal in the Utilities folder within the Applications folder, or simply search for it using Spotlight; Windows user please use PowerShell.\nThat\u0026rsquo;s it! You\u0026rsquo;re ready to start now.\nProcedures # 1. Install Hugo # for MacOS\nRun this command in the terminal. This will install the extended edition of Hugo. brew install hugo Enter this command in the terminal to verify whether Hugo is installed successfully. hugo version for Windows\nRefer to Hugo Installation Instructions or this tutorial on Windows 10 2. Create a Hugo Site # For Windows users, please only use PowerShell for the following commands as required by Hugo. Do not use the Command Prompt or Windows PowerShell. PowerShell and Windows PowerShell are different applications. Run the cd command to navigate to the folder where you\u0026rsquo;d like to store the code for the blog. For example, if you want to place the folder on your Desktop, the command should be: cd ~/Desktop cd means \u0026ldquo;change directory\u0026rdquo;, which will allow the terminal to change its current working directory to another location in the file system. ~ refers to the home directory on your system. It can be omitted if you\u0026rsquo;re already in the home directory.\nIf you want to place your folder in a different location, you will need to modify the code with the actual path. Learn more about the command line here for your reference.\nRun this command with your own site name to create the necessary directory structure for your website. For example, the exact command I used is hugo new site gigigatgat. hugo new site \u0026lt;your-site-name\u0026gt; You should see a folder with the name \u0026lt;your-site-name\u0026gt; on your desktop or your selected location. The folder should include eight subfolders and one configuration file: ├─ archetypes ├─ assets ├─ content ├─ data ├─ hugo.toml ├─ i18n ├─ layouts ├─ static ├─ themes The names and quantities of folders may differ depending on the Hugo version. Don\u0026rsquo;t stress too much about that. ls means \u0026ldquo;list\u0026rdquo;, which will display the contents of a directory.\n3. Download and Configure the Blowfish Theme # If you\u0026rsquo;d like to use another theme, please refer to the specific theme\u0026rsquo;s documentation and then proceed to Step5: Preview and Publish. Download the Blowfish theme # Run the following commands one by one. Make sure you replace \u0026lt;your-site-name\u0026gt; with the actual folder name. cd \u0026lt;your-site-name\u0026gt; git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Check the themes folder in this project. The Blowfish theme should be cloned in this folder. Set up the basic configuration files # In the root folder of your website project, delete the initial hugo.toml file. Copy all the config files from the themes/blowfish/config/_default/ folder to the config/_default/ folder in your root folder. After the previous steps, your folder should look as follows: The official installation, configuration, and updates guide could be found here. Please note that some file names are different because of the version of Hugo. If you\u0026rsquo;re using Hugo Version 0.119.0 or later, my instructions are the most up-to-date.\n4. Dive into the Blowfish Theme # I strongly recommend that you go through the official Blowfish Documentation Series to develop a comprehensive understanding towards the various parameters of the files and functionalities of the theme. This section serves as a quick start for a basic blog and provides some additional explanations based on the documentation.\nIn the theme files, you\u0026rsquo;ll see the # character frequently which is used to denote comments. Removing the # character will activate the line of code.\nModify the configuration files # # config.toml # Set the parameters as below and note that:\nUpdate the baseURL as https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repository-name\u0026gt;. You\u0026rsquo;ll set up the repository in GitHub later. My baseURL in this case is https://avocadoTiff.github.io/gigigatgat. You may want to change the defaultContentLanguage to \u0026ldquo;zh-CN\u0026rdquo; for simplified Chinese or \u0026ldquo;zh-tw\u0026rdquo; for traditional Chinese. Other available languages could be found here. # config/_default/config.toml theme = \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repository-name\u0026gt;\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; # languages.en.toml # If your website language is English, you can just modify the following parts of the file:\n# config/_default/languages.en.toml title = \u0026#34;\u0026lt;your-site-name\u0026gt;\u0026#34; [author] name = \u0026#34;your name\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; headline = \u0026#34;I\u0026#39;m only human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { email = \u0026#34;mailto:hello@your_domain.com\u0026#34; }, { instagram = \u0026#34;https://instagram.com/username\u0026#34; }, { mastodon = \u0026#34;https://mastodon.instance/@username\u0026#34; } ] If the defaultContentLanguage you set in the config.toml file is \u0026ldquo;zh-CN\u0026rdquo;, you should rename this file as languages.zh-CN.toml and update the code as below:\n# config/_default/languages.zh-CN.toml languageCode = \u0026#34;zh-CN\u0026#34; languageName = \u0026#34;Chinese\u0026#34; weight = 1 title = \u0026#34;\u0026lt;your-site-name\u0026gt;\u0026#34; [params] displayName = \u0026#34;中文\u0026#34; isoCode = \u0026#34;zh-CN\u0026#34; rtl = false dateFormat = \u0026#34;2 January 2006\u0026#34; # logo = \u0026#34;img/logo.png\u0026#34; [author] name = \u0026#34;Your name\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; headline = \u0026#34;I\u0026#39;m only human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { email = \u0026#34;mailto:hello@your_domain.com\u0026#34; }, { instagram = \u0026#34;https://instagram.com/username\u0026#34; }, { mastodon = \u0026#34;https://mastodon.instance/@username\u0026#34; } ] The images should be placed in the site’s assets/img/ folder. In the [params] section displayName will only be displayed when the language switch function is used logo represents the site\u0026rsquo;s logo In the [author] section image is your profile image headline will be displayed on the homepage bio will be displayed in the articles if you set showAuthor = true in the params.toml links are the social media icons with links that you\u0026rsquo;d like to share For links, the correct syntax is: links = [{item1}, {item2}, {item3}]. Avoid omitting any punctuation or adding an extra comma after the last item. # menus.en.toml # Refer to the code below for basic menu settings:\n# config/_default/menus.en.toml [[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tech\u0026#34; parent = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;categories/tech\u0026#34; weight = 20 [[main]] name = \u0026#34;Kitchen\u0026#34; parent = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;categories/kitchen\u0026#34; weight = 30 [[main]] name = \u0026#34;About\u0026#34; pageRef = \u0026#34;about\u0026#34; weight = 70 [[main]] identifier = \u0026#34;github\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;your-url-link\u0026#34; weight = 100 [[footer]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 10 [[footer]] name = \u0026#34;Categories\u0026#34; pageRef = \u0026#34;categories\u0026#34; weight = 20 name specifies the text will be displayed in the menu link. pageRef specifies where the Hugo page would be directed to. You need to have corresponding pages in the content folder to be linked to. parent is used for nested menus. identifier and pre are used to place icons in the menu. url is for linking to external URLs. weight is used to sort the menu links in ascending order. The lowest weight will be displayed as the first item in the menu. Similar with above, rename the file as menus.zh-CN.toml if simplified Chinese is your site\u0026rsquo;s defaultContentLanguage.\n# params.toml # This file specifies a wide range of theme parameters that you can use to customize your site. To ensure a smooth start, I suggest you modify the following lines in the file:\n# config/_default/params.toml mainSections = [\u0026#34;posts\u0026#34;] disableImageOptimization = false defaultBackgroundImage = \u0026#34;/img/ocean.jpg\u0026#34; defaultFeaturedImage = \u0026#34;/img/ocean.jpg\u0026#34; highlightCurrentMenuArea = true smartTOC = true smartTOCHideUnfocusedChildren = false [header] layout = \u0026#34;fixed\u0026#34; # valid options: basic, fixed, fixed-fill, fixed-fill-blur [homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom # homepageImage = \u0026#34;/img/ocean.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 10 showMoreLink = false showMoreLinkDest = \u0026#34;posts\u0026#34; cardView = false cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [article] showTableOfContents = true showTaxonomies = true Again, the images should be placed in the site’s assets/img/ folder. For now you can copy all the files from the themes/blowfish/exampleSite/assets/ folder to the assets folder in your root folder for convenience. mainSections is related to the content you\u0026rsquo;d like to display in the Recent articles on the homepage. Refer to the Blowfish Configuration article for more details and experiment with the rest parameters later. Add pages to your site # - Content Organization # All content is placed within the content folder. Below is an example of the content structure based on the above menu:\n. ├── assets │ └── img │ └── ocean.jpg | └── logo.png ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ ├── categories │ │ ├── _index.md │ │ ├── tech │ │ │ └── _index.md │ │ └── kithen │ │ └── _index.md │ ├── tags │ │ └── _index.md │ └── posts │ ├── _index.md │ └── first-post │ ├── featured.jpg │ └── index.md └── themes └── blowfish - Add Content # There are two ways to add content in the site project: you can either use the GUI (Graphical User Interface) or the CLI (Command Line Interface).\nGUI: Simply create new folders, copy and paste files, edit them in your code editor. The example files can be found at themes/blowfish/exampleSite/content/ folder. Don\u0026rsquo;t copy all of the example files. Simplify the main content to plain text immediately, as the old content may be related to other files and could cause errors. CLI: Copy default.md from themes/blowfish/exampleSite/archetypes/ folder to replace the initial one in the archetypesfolder in your root directory. Use the terminal to run this Hugo command to create a new page: hugo new content posts/my-first-post/index.md This command will create an index.md file in the content/posts/my-first-post folder based on the front matter template defined in the archetypes folder. If you open the file in your code editor, it will now look like this:\n--- title: \u0026#34;Index\u0026#34; date: 2023-11-02T16:21:18-04:00 draft: true --- - Branch pages # Branch pages include the homepage, section listings, and taxonomy pages. The filename for this content type is _index.md. As you can see in the above content structure, the content/_index.md file defines the content of the homepage, and the content/posts/_index.md file defines the content of the posts page. In this example, I only specified the title, description, and whether the posts list on this page would be grouped by year:\n--- title: \u0026#34;Posts\u0026#34; description: \u0026#34;All posts\u0026#34; groupByYear: true --- - Leaf pages # Leaf pages are single pages that don\u0026rsquo;t contain a list of sub-pages. It is named as index.md in the corresponding post folder for an individual article page or about.md for an about page. My index.md file in the content/posts/Getting Started with Entity Framework Core in Visual Studio folder looks like this:\n--- title: \u0026#34;Getting Started with Entity Framework Core in Visual Studio\u0026#34; date: 2023-10-24 draft: false description: \u0026#34;How to use Entity Framework Core to connect database in Visual Studio\u0026#34; slug: \u0026#34;how to use Entity Framework Core\u0026#34; tags: [\u0026#34;tutorial\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;ASP.NET\u0026#34;, \u0026#34;VisualStudio\u0026#34;] categories: [\u0026#34;Tech\u0026#34;] --- Entity Framework Core is a powerful tool for simplifying database integration with web applications... draft determines whether this content is ready to be published or not. If it is set to true, the content will not be visible when you build the site. slug is used in the URL path when the content is published. In my case, the link for this post would be https://tiffahahahu7.github.io/gigigatgat/posts/how-to-use-entity-framework-core/. tags and categories are defined here to be displayed on the Tags and Categories pages. The body of the post is written in markdown, an easy-to-use text formatting language. I strongly recommend familiarizing yourself with it. For more explanations, you can refer to Blowfish\u0026rsquo;s Content Examples and Front Matter.\n5. Preview and Publish # Run this command in the terminal to preview the site in your browser, with the given URL address http://localhost:1313/ or http://localhost:1313/\u0026lt;repository-name\u0026gt; depending on your baseURL. hugo server Make sure that the draft value for the pages you want to display is set to false; otherwise, they won\u0026rsquo;t appear in the browser, unless you run hugo server -D. If you site doesn\u0026rsquo;t render your posts correctly, double-check the rules for content organization.\nModify the content and configuration until you\u0026rsquo;re satisfied with the preview. Tags and Categories may not be updated immediately. In this case, try to exit by pressing Ctrl + C and restart hugo server to see the changes. In the root directory, run the following command to publish the site. It will create a public folder with the entire static files necessary for your website. hugo 6. How to Deploy the Site with GitHub Pages # Go to your GitHub Account and create a new repository. The repository name should be in accordance with your baseURL in the config.toml file. Run the following commands to add the GitHub repository as a remote repository and push all the local files to it. Remember to replace with your own remote URL. git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/avocadoTiff/gigigatgat.git git push -u origin main If you encounter a prompt requiring your GitHub username and password. Enter your personal access token as the password instead of your account password. Change your directory into public. Run the following commands to connect to the remote repository and create a gh-pages branch cd public git init git remote add origin https://github.com/avocadoTiff/gigigatgat.git git checkout --orphan gh-pages Run the following commands to upload the files to gh-pages branch git add . git commit -m \u0026#34;upload site files\u0026#34; git push -u origin gh-pages In the Settings \u0026gt; Pages, ensure that the GitHub Pages site is being built from the gh-pages branch Wait for a few minutes and refresh the page. You\u0026rsquo;ll see a message like this: Your site is live at https://avocadotiff.github.io/gigigatgat/. 🎉 Congrats! Your blog is now live online!\n7. How to Update Your Blog # Once you make any modification or add new posts to your blog, you can update your blog by three steps:\nIn the root directory, review you site preview by executing the command hugo server and then run the command hugo to update the site files in the public folder. Ensure that you\u0026rsquo;re still in the in the root directory and run the following commands: git add . git commit -m \u0026#34;add new posts\u0026#34; git push -u origin main Change your directory into public by the command cd public and run the following commands: git add . git commit -m \u0026#34;add new posts\u0026#34; git push -u origin gh-pages This is the most basic way of updating your blog manually. You can also automate the deployment process with GitHub Actions, which is a more advanced and efficient method. I\u0026rsquo;m still in the process of learning GitHub Actions, and I\u0026rsquo;ll keep you updated if I come across an easier way to comprehend and make use of this tool. Thank you for reading this far! I hope this tutorial can help you in building your personal blog smoothly. If you have any questions during the process, please feel free to reach out. I\u0026rsquo;m more than happy to help create another blog in the universe.\nReference # Hugo Documentation Blowfish Documentation Series Create a static website with Hugo and Host it with Github Pages ","date":"4 November 2023","permalink":"/gigigatgat/posts/how-to-create-a-blog/","section":"Posts","summary":"Everyone deserves to own a blog. I\u0026rsquo;m here to help.","title":"A Beginner-Friendly Tutorial for Building a Blog with Hugo, the Blowfish Theme, and GitHub Pages"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"I hope you like avocados as I do.\n","date":"4 November 2023","permalink":"/gigigatgat/authors/avocado/","section":"Authors","summary":"I hope you like avocados as I do.","title":"Avocado (Tiffany)"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/tags/blog/","section":"Tags","summary":"","title":"blog"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/tags/code/","section":"Tags","summary":"","title":"code"},{"content":"To demo how to build a blog for beginners, I created a new user on my macOS and reinstalled Hugo in the new environment. However, the latest Hugo version, 0.120.3, unfortunately has some compatibility issues with the installed Blowfish module. For example, certain configuration parameters such as showDate, showView, showLikes cannot be rendered correctly on my site. While this issue may be resolved in future version updates, I would like to revert to my previous Hugo version, 0.119.0, for the time being.\nbrew install hugo@0.119.0 was my initial thought, but it didn\u0026rsquo;t work as expected. After some research, I found that Manuel Martinez\u0026rsquo;s method worked best for me. Below are the exact procedures with a few adjustments.\nProcedures # 1. Download a Specific Hugo Version # Visit Hugo releases on GitHub and search for the version that you want to install Click on the specific version number link and scroll down to the Assets section Choose the package that matches your operating system. The one I downloaded is hugo_extended_0.119.0_darwin-universal.tar.gz Verify the package\u0026rsquo;s contents before extracting it using the command: tar tvf ~/Downloads/hugo_extended_0.119.0_darwin-universal.tar.gz Remember to change the path if your package is downloaded in a different location. You\u0026rsquo;ll see something like below in the terminal:\n-rwxr-xr-x 0 root root 145442184 Sep 24 11:29 hugo -rw-r--r-- 0 root root 12810 Sep 24 11:19 README.md -rw-r--r-- 0 root root 11347 Sep 24 11:19 LICENSE 2. Edit the Shell Profile # Run echo $PATH to see the order of directories in your PATH. By default, you may see the result starts with /opt/homebrew/bin/hugo Run the following command to determine whether your default shell is bash or zsh echo $SHELL Depending on the type of the shell, edit the profile using one of the commands below nano ~/.bash_profile #or nano ~/.zprofile Add export PATH=\u0026quot;$HOME/bin:$PATH\u0026quot; to the beginning of the file Press Ctrl + O to save the changes and exit by pressing Ctrl + X Run one of the following commands to apply the changes to the current session source ~/.bash_profile #or source ~/.zprofile 3. Install Hugo in the Local Bin Directory # Check whether you already have a bin directory in the home directory; if not, create one ls ~/bin #or mkdir ~/bin Move to the bin directory and extract the tarball cd ~/bin tar -xvzf ~/Downloads/hugo_extended_0.119.0_darwin-universal.tar.gz 4. Verify the Installation # Run which hugo to confirm Hugo is in the local bin directory Re-run echo $PATH. It should now begin with the path /Users/\u0026lt;your-user-name\u0026gt;/bin Run hugo version to display the Hugo version your system is using Reference # Install Specific Version Hugo MacOS ","date":"4 November 2023","permalink":"/gigigatgat/posts/install-specific-hugo-version/","section":"Posts","summary":"To demo how to build a blog for beginners, I created a new user on my macOS and reinstalled Hugo in the new environment.","title":"How to Install a Specific Version of Hugo on macOS"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/tags/hugo/","section":"Tags","summary":"","title":"hugo"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" More Than Web Development This section contains tutorials, notes, and everything related to the field of technology.\n","date":"4 November 2023","permalink":"/gigigatgat/categories/tech/","section":"Categories","summary":"More Than Web Development This section contains tutorials, notes, and everything related to the field of technology.","title":"Tech"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/tags/tutorial/","section":"Tags","summary":"","title":"tutorial"},{"content":"This is the home of Avocado \u0026amp; Sloth, where we \u0026quot;gigigatgat\u0026quot;(a Cantonese slang meaning to chatter away) about everything in our life. Sometimes we also invite friends over to enjoy the space and write some inspirable blogs.\n🥑 Avocado (Tiffany): female(she/her), favorite color is green just like an avocado, head chef in our home\n🦥 Sloth (Raymond): male(he/him), passionate about football and video games, honorable master sous chef\n","date":"4 November 2023","permalink":"/gigigatgat/","section":"Welcome to GiGiGatGat! 💬","summary":"This is the home of Avocado \u0026amp; Sloth, where we \u0026quot;gigigatgat\u0026quot;(a Cantonese slang meaning to chatter away) about everything in our life.","title":"Welcome to GiGiGatGat! 💬"},{"content":"","date":"24 October 2023","permalink":"/gigigatgat/tags/asp.net/","section":"Tags","summary":"","title":"ASP.NET"},{"content":" Entity Framework Core is a powerful tool for simplifying database integration with web applications. In this article, we\u0026rsquo;ll gain a basic understanding of Entity Framework Core and demonstrate how it streamlines the process of connecting databases to your web pages. You\u0026rsquo;ll also find step-by-step instructions to help you get started, regardless of whether you\u0026rsquo;re a Windows or Mac user. Since I\u0026rsquo;m a Mac user, most of the screenshots in this tutorial will be from a Mac system.\nWhat is Entity Framework Core? # Entity Framework Core (EF Core) is an open-source and lightweight framework developed by Microsoft. It is widely used in .NET applications to help developers interact with relational databases and convert data into entity classes in a more object-oriented manner. This tool also enables automatic generation of Razor pages with accessible data and default layout settings. You can install EF Core on NuGet public domain to your web application projects in Visual Studio.\nPrerequisites # Installed Visual Studio and MySql Workbench Connect to local instance in MySql and ensure the server status is Running A populated database to be converted to classes and displayed on web pages In my case, I created a new scheme named StudentRecord and ran the sql file StudentRecordDBBuilder.MySQL.sql to populate it Basic knowledge about ASP.NET and Razor Page Procedures # 1. Create a new ASP.NET Razor Page web application project in Visual Studio # Choose the Web Application template for creating an ASP.NET Core application with example ASP.NET Razor Page content Select .NET 7.0 as the targeted frame Uncheck Configure for HTTPS Name the project and solution as you prefer, and place the folder in a location that best suits you 2. Install Microsoft Entity Framework Core # Right click on the project folder and select Manage NuGet Packages Select Browse tab, and select nuget.org as the package source. Search and install the following three packages to the project. You may need to click Accept if a License Acceptance window pops up. MySql.EntityFrameworkCore Microsoft.EntityFrameworkCore.Tools Microsoft.VisualStudio.Web.CodeGeneration.Design Double check whether these three packages are installed successfully by expanding the project’s Dependencies and Packages or browsing the Installed tab in the NuGet Packages Manager\u0026rsquo;s window 3. Generate the entity classes from the database # Create a folder DataAccess in the project to contain the generated classes for MacOS # Select Show Terminal Window from Tools in the menu if the terminal window is hiding Run the following commands in the VS terminal window: to create a new Tool Manifest: dotnet new tool-manifest to install dotnet-ef: dotnet tool install dotnet-ef to make the dotnet-ef command available: dotnet tool restore to generate classes for each tables in the database and the DataContext class: dotnet dotnet-ef dbcontext Scaffold \u0026quot;Server=localhost; User ID=root; Password=yourPassword; Database=yourDatabaseName\u0026quot; MySql.EntityFrameworkCore -o DataAccess for Windows # Select NuGet Package Manager from Tools in the menu and start NuGet Package Manager Console Run the following command with your own credentials: Scaffold-DbContext “Server=localhost; User ID=root; Password=yourPassword; Database=yourDatabaseName” MySql.EntityFrameworkCore -o DataAccess Remember to use your own credentials in the Scaffold command instead of copying and pasting! By finishing the above steps, the Entity Framework scaffold tool will generate a set of class files in the DataAccess folder 4. Modify the DB connection string for security concerns # Add a ConnectionStrings section with one connection string using the same name of your database in the application’s configuration file appsetting.json Remove the hardcoded connection string in the DB Context Class file, e.g. StudentRecordContext.cs 5. Register the DB Access Service with the Application # In the Program.cs file, add the following statements to the beginning: using Microsoft.EntityFrameworkCore; using \u0026lt;ProjectName\u0026gt;.DataAccess; In the same file, add the following codes after builder.Services.AddRazorPages( ): string dbConnStr = builder.Configuration.GetConnectionString(\u0026#34;StudentRecord\u0026#34;); if (dbConnStr != null) { builder.Services.AddDbContext\u0026lt;StudentRecordContext\u0026gt;( options =\u0026gt; options.UseMySQL(dbConnStr)); } Select Rebuild Solution from Build in the menu and ensure that the solution build successfully 6. Generate Razor pages using Entity Framework (CRUD) # Add a new folder inside the Pages folder, right click on the folder and select Add \u0026gt; New Scaffolding Select Razor Pages using Entity Framework (CRUD) and choose the corresponding model class and data context class you\u0026rsquo;d like to apply By finishing the above steps, the CRUD Razor pages are already generated inside the folder 7. Review and modify the pages according to your needs # In the _Layout.cshtml page, add menu items in the navbar to access the newly generated pages from the index page Run the application and view the pages in browser Common Errors # Debugging is a common practice in application development. One of my biggest challenges in this project is running the Scaffold command. I\u0026rsquo;ve listed a few errors that I encountered and their respective solutions below.\n1. Unable to find provider assembly \u0026lsquo;MySql.EntityFrameworkCore\u0026rsquo; # I re-installed \u0026lsquo;MySql.EntityFrameworkCore\u0026rsquo; with a different version(7.0.5) and forgot to update it. Rebuild the solution will solve this issue.\n2. Missing required argument \u0026lsquo;\u0026lt;Provider\u0026gt;\u0026rsquo; # Double-check the quotation marks in the command. In my case, I mistakenly used Chinese quotation marks.\n3. Authentication to host \u0026rsquo;localhost\u0026rsquo; for user \u0026lsquo;root\u0026rsquo; using method \u0026lsquo;caching_sha2_password\u0026rsquo; failed with message: access denied for user \u0026lsquo;root\u0026rsquo;@\u0026rsquo;localhost\u0026rsquo; (using password: yes) # If you are absolutely certain that you are using the correct password, it\u0026rsquo;s likely that a special character in the password is causing confusion in the terminal/console. You can change the password to a simpler one or create a new temporary user with all privileges and try again.\nCredit # This blog is inspired from a lab assignment of the course CST8256 Web Programming Language I, with an original instruction written by Wei Gong.\n","date":"24 October 2023","permalink":"/gigigatgat/posts/how-to-use-entity-framework-core/","section":"Posts","summary":"Entity Framework Core is a powerful tool for simplifying database integration with web applications.","title":"Getting Started with Entity Framework Core in Visual Studio"},{"content":"","date":"24 October 2023","permalink":"/gigigatgat/tags/visualstudio/","section":"Tags","summary":"","title":"VisualStudio"},{"content":"Hi there! We are Avocado and Sloth, a couple studying Web Development and living in Ottawa, Canada.\nAvocado is usually sold in supermarkets at a price of $5 for two. Oops. Wait a minute. Something goes wrong. Let\u0026rsquo;s load again.\nconst Avocado = { name: \u0026#34;Tiffany\u0026#34;, gender: \u0026#34;female\u0026#34;, identity: \u0026#34;global citizen\u0026#34;, roles: [\u0026#34;creator of the blog\u0026#34;, \u0026#34;head chef\u0026#34;], languages: [ { name: \u0026#34;English\u0026#34;, level: \u0026#34;Fluent\u0026#34; }, { name: \u0026#34;Mandarin\u0026#34;, level: \u0026#34;Fluent\u0026#34; }, { name: \u0026#34;Cantonese\u0026#34;, level: \u0026#34;Fluent\u0026#34; }, //not as good as Sloth { name: \u0026#34;German\u0026#34;, level: \u0026#34;Intermediate\u0026#34; }, //almost forget { name: \u0026#34;French\u0026#34;, level: \u0026#34;Beginner\u0026#34; }, //A2 in Duolingo { name: \u0026#34;Japanese\u0026#34;, level: \u0026#34;Beginner\u0026#34; } ], hobbies: [\u0026#34;Cooking\u0026#34;, \u0026#34;Theater\u0026#34;, \u0026#34;Plants\u0026#34;, \u0026#34;Pokemon\u0026#34;, \u0026#34;Reading others\u0026#39; blogs\u0026#34;], skills: [\u0026#34;HTML\u0026#34;, \u0026#34;CSS\u0026#34;, \u0026#34;JavaScript\u0026#34;, \u0026#34;PHP\u0026#34;, \u0026#34;React\u0026#34;, \u0026#34;C#\u0026#34;, \u0026#34;ASP.NET\u0026#34;] }; const Sloth = { name: \u0026#34;Raymond\u0026#34;, gender: \u0026#34;male\u0026#34;, identity: \u0026#34;Hongkonger\u0026#34;, roles: [\u0026#34;contributor of the blog\u0026#34;, \u0026#34;master sous chef\u0026#34;, \u0026#34;Avocado\u0026#39;s hairdryer\u0026#34;], languages: [ { name: \u0026#34;English\u0026#34;, level: \u0026#34;Fluent\u0026#34; }, { name: \u0026#34;Cantonese\u0026#34;, level: \u0026#34;Fluent\u0026#34; }, { name: \u0026#34;Mandarin\u0026#34;, level: \u0026#34;Fluent\u0026#34; }, //not as good as Avocado ], hobbies: [\u0026#34;Football\u0026#34;, \u0026#34;Video Games\u0026#34;, \u0026#34;Music\u0026#34;, \u0026#34;Gym\u0026#34;, \u0026#34;Pokemon\u0026#34;], skills: [\u0026#34;HTML\u0026#34;, \u0026#34;CSS\u0026#34;, \u0026#34;JavaScript\u0026#34;, \u0026#34;PHP\u0026#34;, \u0026#34;React\u0026#34;, \u0026#34;C#\u0026#34;, \u0026#34;ASP.NET\u0026#34;] }; Here it is. You may find our individual blogs in the Authors section of the footer menu below.\n","date":"1 January 0001","permalink":"/gigigatgat/about/","section":"Welcome to GiGiGatGat! 💬","summary":"Hi there! We are Avocado and Sloth, a couple studying Web Development and living in Ottawa, Canada.","title":"About"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. 🚀\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"1 January 0001","permalink":"/gigigatgat/tags/advanced/","section":"Tags","summary":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing.","title":"Advanced"},{"content":"Check out my awesome friends\u0026rsquo; blogs. Feel free to contact me to exchange links!\nDouchi Space Third Shire Ignativssss Harper Dang Meiyue Qingshanbadass ","date":"1 January 0001","permalink":"/gigigatgat/friends/","section":"Welcome to GiGiGatGat! 💬","summary":"Check out my awesome friends\u0026rsquo; blogs. Feel free to contact me to exchange links!","title":"Friends"},{"content":" Food Made in Our Home Here we share the recipes that we tried and loved the most.\n","date":"1 January 0001","permalink":"/gigigatgat/categories/kitchen/","section":"Categories","summary":"Food Made in Our Home Here we share the recipes that we tried and loved the most.","title":"Kitchen"},{"content":" Our Life and Thought Pieces This section records our thoughts and experiences in daily life.\n","date":"1 January 0001","permalink":"/gigigatgat/categories/life/","section":"Categories","summary":"Our Life and Thought Pieces This section records our thoughts and experiences in daily life.","title":"Life"},{"content":" Books, Games, Music, Movies, Dramas, and Things We comment on our selections, including purchases, viewing history and more.\n","date":"1 January 0001","permalink":"/gigigatgat/categories/review/","section":"Categories","summary":"Books, Games, Music, Movies, Dramas, and Things We comment on our selections, including purchases, viewing history and more.","title":"Review"},{"content":"","date":"1 January 0001","permalink":"/gigigatgat/series/","section":"Series","summary":"","title":"Series"},{"content":"I am not as lazy as a sloth.\n","date":"1 January 0001","permalink":"/gigigatgat/authors/sloth/","section":"Authors","summary":"I am not as lazy as a sloth.","title":"Sloth (Raymond)"}]