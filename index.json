[{"content":"你也喜歡牛油果嗎？\n","date":"20 April 2024","permalink":"/authors/avocado/","section":"作者","summary":"你也喜歡牛油果嗎？","title":"Avocado (Tiffany)"},{"content":"","date":"20 April 2024","permalink":"/tags/domain/","section":"標籤","summary":"","title":"domain"},{"content":"","date":"20 April 2024","permalink":"/tags/github/","section":"標籤","summary":"","title":"github"},{"content":"","date":"20 April 2024","permalink":"/tags/hugo/","section":"標籤","summary":"","title":"hugo"},{"content":"Frankly speaking, I don\u0026rsquo;t like the official GitHub Doc on Configuring a custom domain for your GitHub Pages site. It contained too much information with a questionable order of steps, making it harder to read and far less straightforward for someone attempting the action for the first time. Recently I added two custom domain names for my own blog (YES, our URL is now updated to gigiggatgat.ca ! Cheers!) and my friend\u0026rsquo;s blog. Despite following the exact same steps, my experience was still different, leaving me confused at certain points. This post aims to demonstrate how simple configuring a custom domain name should be and how to troubleshoot possible scenarios. Let\u0026rsquo;s see.\n1. Buy A Domain Name # I bought from GoDaddy, but you can choose whichever platform you prefer.\n2. Update DNS Records # In the GoDaddy dashboard, find DNS in the domain settings and make following changes:\nEdit the existing CNAME record with Name \u0026ldquo;www\u0026rdquo;, and update the value to \u0026lt;username.github.io\u0026gt;, regardless of whether your site is hosted at \u0026lt;username.github.io\u0026gt; or \u0026lt;username.github.io/repository_name\u0026gt;. Edit the existing A record with Name \u0026ldquo;@\u0026rdquo;, and update the value to 185.199.108.153, which is one of the IP addresses associated with GitHub\u0026rsquo;s server infrastructure, specifically used for serving GitHub Pages websites. Click \u0026ldquo;Add New Record\u0026rdquo; button and add 3 more A type record with Name \u0026ldquo;@\u0026rdquo;. Their values are respectively 185.199.109.153, 185.199.110.153, 185.199.111.153. Generally, there is no need to modify other records or adjust default TTL settings anymore. The table should appear as follows: 3. Create CNAME File # There are two ways to create a CNAME file, manually or automatically, each with its own slight pros and cons.\nManual: In the root directory of your website files, (e.g., public folder for a Hugo site), create a new file named “CNAME”(all uppercase), and directly add your purchased domain name to it. This method requires an extra step to add, commit, and push your changes to the source branch of Github Pages, gh-pages branch in my case. Automatic: Go to your site\u0026rsquo;s repository on GitHub, then click on Settings - Pages, and save your domain name in the \u0026ldquo;Custom domain\u0026rdquo; section. It will automatically add a CNAME file to the root of your source branch and skip step 4 in this article. However, you\u0026rsquo;ll need to run git pull or git pull --no-rebase later to ensure consistency between your local and remote repositories. It is recommended to run git pull --no-rebase if you have no other local changes. 4. Save Custom Domain in Settings # As mentioned above, simply go to your site\u0026rsquo;s repository on GitHub, click on Settings - Pages, and save your domain name in the \u0026ldquo;Custom domain\u0026rdquo; section. You\u0026rsquo;ll immediately see the \u0026ldquo;DNS Check in Progress\u0026rdquo; message.\nIf it is unsuccessful, open your terminal and run the command dig \u0026lt;domain_name\u0026gt; to check whether your DNS record has been configured correctly. If the result matches the four IP addresses for GitHub Pages, you are good to go. If not, wait for a few minutes and try again. Be patient and relax, as sometimes DNS propagation can take up to 48 hours. 5. Enable HTTPS # As simple as checking the “Enforce HTTPS” box below where you typed your domain name in the \u0026ldquo;Custom domain\u0026rdquo; section. I wondered for a sec whether I need to buy a separate SSL certificate but thank God HTTPS enforcement is included for any GitHub Pages site. If you\u0026rsquo;re unable to click the checkbox at the moment, just give it a bit more time.\n6. Extra Step for A Hugo Site # In the config file of your Hugo site, update the baseURL to the absolute URL of your published site (e.g., https://your_domain.com/). Please note that the last forward slash sometimes matters as it is related to how your Hugo theme handles relative URLs. It can impact the rendering of stylesheets and other resources, so consider including or removing it based on your specific situation.\nReference # GoDaddy Domain with GitHub Pages Managing a custom domain for your GitHub Pages site Troubleshooting custom domains and GitHub Pages ","date":"20 April 2024","permalink":"/posts/custom-domain-name/","section":"博客","summary":"Frankly speaking, I don\u0026rsquo;t like the official GitHub Doc on Configuring a custom domain for your GitHub Pages site.","title":"Simplified Guide: Configuring a Custom Domain Name for GitHub Pages Site"},{"content":"","date":"20 April 2024","permalink":"/tags/tutorial/","section":"標籤","summary":"","title":"tutorial"},{"content":"","date":"20 April 2024","permalink":"/categories/","section":"分類","summary":"","title":"分類"},{"content":"","date":"20 April 2024","permalink":"/authors/","section":"作者","summary":"","title":"作者"},{"content":"","date":"20 April 2024","permalink":"/posts/","section":"博客","summary":"","title":"博客"},{"content":"","date":"20 April 2024","permalink":"/tags/","section":"標籤","summary":"","title":"標籤"},{"content":" More Than Web Development ","date":"20 April 2024","permalink":"/categories/tech/","section":"分類","summary":"More Than Web Development","title":"轉碼心得"},{"content":"哈嘍！歡迎來到Avocado和Sloth的共享博客，我們會在這個老巢嘰嘰乞乞（廣東話短語，約等於嘰嘰喳喳）生活裡的一切，包括且不限於轉碼心得，廚房故事，日常札記和萬物測評。有時候我們也會邀請一些朋友來共享這個空間，發布屬於ta們的作品，文字萬歲！\n🥑 Avocado (Tiffany): 女的，INFJ，著迷草木山海裡的每一種綠色，身份是家庭大廚\n🦥 Sloth (Raymond): 男的，INFP，痴迷足球和打機，身份是值得尊重的大師級廚房助手\n本站英文界面只包含英文內容，中文界面則會包含中英文在內的所有內容。 ","date":"20 April 2024","permalink":"/","section":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬","summary":"哈嘍！歡迎來到Avo","title":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬"},{"content":"","date":"18 April 2024","permalink":"/tags/api/","section":"標籤","summary":"","title":"api"},{"content":"","date":"18 April 2024","permalink":"/tags/code/","section":"標籤","summary":"","title":"code"},{"content":"","date":"18 April 2024","permalink":"/tags/docker/","section":"標籤","summary":"","title":"docker"},{"content":"In this guide, we\u0026rsquo;ll explore how to host a RESTful API with MariaDB 10 on a Raspberry Pi using Docker, Express.js, and Ngrok. By containerizing our application with Docker, leveraging the power of Express.js for building the API, and utilizing Ngrok for internet exposure, we\u0026rsquo;ll unlock the potential of the Raspberry Pi as a versatile hub for IoT and home automation projects. Let\u0026rsquo;s get started!\n1. Setting RESTful API in Express.js # Express.js, a widely embraced JavaScript framework, is known for setting up robust servers. Inside the Express.js, I integrated two more frameworks: mysql2 and cors. The decision to incorporate mysql2 due to its compatibility with MariaDB, as my Raspberry Pi currently supports only the older MariaDB 10 version rather than the latest MySQL version. Furthermore, I employed the cors framework to circumvent cross-site policy restrictions seamlessly. Let’s take a look at the finished version of the API codes in Express framework.\n// import frameworks const express = require(\u0026#39;express\u0026#39;); const mysql = require(\u0026#39;mysql2\u0026#39;); const cors = require(\u0026#39;cors\u0026#39;); //Express config const app = express(); app.use(cors()); // Create a connection to the MySQL database const connection = mysql.createConnection({ host: \u0026#39;0.tcp.ngrok.io\u0026#39;, // Ngrok tunnel URL port: \u0026#39;Xxxxxx\u0026#39;, // Ngrok tunnel port user: \u0026#39;Xxxx\u0026#39;, password: \u0026#39;Xxxxxx\u0026#39;, database: \u0026#39;Xxxxxx\u0026#39; }); // Connect to the database connection.connect((err) =\u0026gt; { if (err) { console.error(\u0026#39;Error connecting to MySQL database:\u0026#39;, err); return; } console.log(\u0026#39;Connected to MySQL database\u0026#39;); }); // Listening to the Get request on \u0026#34;/messages\u0026#34; route app.get(\u0026#39;/messages\u0026#39;, (req, res) =\u0026gt; { // Retrieve all messages from the database connection.query(\u0026#39;SELECT * FROM user_messages\u0026#39;, (err, results) =\u0026gt; { if (err) { console.error(\u0026#39;Error retrieving messages:\u0026#39;, err); res.status(500).send(\u0026#39;Internal Server Error\u0026#39;); return; } res.json(results); }); }); const port = 8080; app.listen(port, async () =\u0026gt; { console.log(`Server is listening on port ${port}`); }); Let’s break them down into pieces # **const app = express();** Here, we\u0026rsquo;re initializing an Express application. Think of it as creating a canvas where we\u0026rsquo;ll paint our server-side logic and routes. app becomes our gateway to handle HTTP requests and responses.\n**app.use(cors());** app.use() is widely used to set up middleware. This line sets up Cross-Origin Resource Sharing (CORS) middleware. CORS is essential for allowing our API to be accessed by web pages from different origins (domains). It helps bypass browser security restrictions by allowing specified origins to access our server\u0026rsquo;s resources.\n// Create a connection to the MySQL database const connection = mysql.createConnection({ host: \u0026#39;0.tcp.ngrok.io\u0026#39;, // Your designated Ngrok tunnel URL port: \u0026#39;XXXX\u0026#39;, // Your designated Ngrok tunnel port user: \u0026#39;xxxx\u0026#39;, // Your database user password: \u0026#39;xxxxx\u0026#39;, // Your corresponding database user\u0026#39;s password database: \u0026#39;xxxxxx\u0026#39; // Targeted database }); This code snippet creates a connection to the MaridDB on Raspberry PI using the mysql2 package. The connection parameters encompass essential details like the host (configured with the Ngrok tunnel URL for remote accessibility), port (mapped to the Ngrok tunnel port), username, password, and the specific database name.\nGiven that this API will reside within a Docker container, it\u0026rsquo;s isolated from direct access to the MariaDB server on the Raspberry Pi. To address this limitation, one solution involves exposing the Pi\u0026rsquo;s MariaDB server through a TCP tunnel URL. By securely making the server public using Ngrok, the container then can establish access to the Pi\u0026rsquo;s MariaDB server at Ngrok’s public TCP tunneling.\nTo execute this connection successfully, it\u0026rsquo;s imperative to register for a Ngrok account and install Ngrok on the PI to configure the tunnel accordingly. This setup ensures secure and efficient communication between the Docker container and the MariaDB server on the Raspberry Pi.\nngrok tcp 3306 After successfully installation, you can simply run the above code on your PI’s terminal to instruct Ngrok to create a TCP connection between its public server and your PI’s 3306 port, which is the port normally MySQL server running at. If all things go well, you may get a public link similar to “tcp://0.tcp.ngrok.io:XXXXX”, and then just apply corresponding parts to the connection configuration as above.\nngrok http 8080 Here\u0026rsquo;s an additional Ngrok action: publishing its own port 8080. This action is taken to make the container\u0026rsquo;s service accessible to the public via the Pi\u0026rsquo;s port 8080. I\u0026rsquo;ll provide further details in the explanation that follows.\n// Connect to the database connection.connect((err) =\u0026gt; { if (err) { console.error(\u0026#39;Error connecting to MySQL database:\u0026#39;, err); return; } console.log(\u0026#39;Connected to MySQL database\u0026#39;); }); Once the connection object is configured, we attempt to connect to the database using the connect method. If an error occurs during the connection process, it will be logged to the console. Otherwise, a success message confirming the connection is printed to the console. This setup enables our Node.js application to interact with the MariaDB database hosted on the Raspberry Pi via Ngrok tunneling.\n// Listening to the Get request on \u0026#34;/messages\u0026#34; route app.get(\u0026#39;/messages\u0026#39;, (req, res) =\u0026gt; { // Retrieve all messages from the database connection.query(\u0026#39;SELECT * FROM user_messages\u0026#39;, (err, results) =\u0026gt; { if (err) { console.error(\u0026#39;Error retrieving messages:\u0026#39;, err); res.status(500).send(\u0026#39;Internal Server Error\u0026#39;); return; } res.json(results); }); }); For simplification, this API will only listens for a GET request on the \u0026ldquo;/messages\u0026rdquo; route using Express.js. Upon receiving the request, it executes a query to retrieve all messages from the \u0026ldquo;user_messages\u0026rdquo; table in the database. If an error occurs during the database query, it logs the error and sends a 500 Internal Server Error response. Otherwise, it sends the retrieved messages as a JSON response to the client.\nconst port = 8080; app.listen(port, async () =\u0026gt; { console.log(`Server is listening on port ${port}`); }); Lastly, this code sets the port number to 8080 and instructs the Express application to listen for incoming connections on that port. Once the server is successfully listening, it logs a message indicating the server is up and running on the specified port.\n2. Configurating Docker image build # After completing the API code setup, it\u0026rsquo;s time to configurate how to build and run the Docker image. While for this project, having just one service - the API service - makes it feasible to solely utilize a Dockerfile without creating a new docker-compose.yml, I personally opt for using docker-compose.yml to enhance the clarity and structure of my services. However, the choice ultimately rests with you.\nDockerfile # FROM node:18 # Install ngrok RUN curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc \\ | tee /etc/apt/trusted.gpg.d/ngrok.asc \u0026gt;/dev/null \u0026amp;\u0026amp; \\ echo \u0026#34;deb https://ngrok-agent.s3.amazonaws.com buster main\u0026#34; \\ | tee /etc/apt/sources.list.d/ngrok.list \u0026amp;\u0026amp; \\ apt-get update \u0026amp;\u0026amp; \\ apt-get install -y ngrok # Set working directory inside the container WORKDIR /app # Copy package.json and package-lock.json to the container COPY package*.json ./ # Install dependencies RUN npm install # Copy the rest of the application code to the container COPY . . # Set executable permissions for the start script RUN chmod +x start.sh # Command to run the application using the start script CMD [\u0026#34;./start.sh\u0026#34;] Let’s break them down into pieces # FROM node:18 This line specifies the base image to use for the container, in this case, it\u0026rsquo;s a Node.js image with version 18.\n# Install ngrok RUN curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc \\ | tee /etc/apt/trusted.gpg.d/ngrok.asc \u0026gt;/dev/null \u0026amp;\u0026amp; \\ echo \u0026#34;deb https://ngrok-agent.s3.amazonaws.com buster main\u0026#34; \\ | tee /etc/apt/sources.list.d/ngrok.list \u0026amp;\u0026amp; \\ apt-get update \u0026amp;\u0026amp; \\ apt-get install -y ngrok This section comes from the official Ngrok’s instruction, telling the container to install Ngrok by adding the Ngrok repository and installing the Ngrok package using apt-get.\n# Set executable permissions for the start script RUN chmod +x start.sh # Command to run the application using the start script CMD [\u0026#34;./start.sh\u0026#34;] These syntaxes set executable permissions for the [start.sh](http://start.sh) script and specifies the command to run when the container starts, which is executing the start.sh script. start.sh is a shell script includes multiple commands to configures Ngrok with an authentication token and runs a Node.js application in the background and so on. Here is the start.sh:\n# Configure ngrok authentication token ngrok config add-authtoken \u0026lt;Your token\u0026gt; # Run your Node.js application in the background node pi-mariadb-api.js Configure ngrok authentication token: Sets up Ngrok with an authentication token. Run your Node.js application in the background: Starts the Node.js application pi-mariadb-api.js in the background. docker-compose.yml # version: \u0026#39;3.3\u0026#39; services: pi-mariadb-api: build: . ports: - \u0026#34;8080:8080\u0026#34; networks: - backend networks: backend: After successfully building the Docker image using the provided Dockerfile, the above docker-compose.yml will guide the container to expose itself on port 8080 and connect with the Pi at port 8080. It\u0026rsquo;s important to note that these two ports are different. The first one (exposed by ngrok) is the port number we asked Ngrok to publish online previously when the second one is the port number container expose itself at.\nHere\u0026rsquo;s the flow: When external users access Ngrok\u0026rsquo;s public link, they will communicate with the Pi\u0026rsquo;s port 8080. Since this port is also where the container renders its services, users will ultimately access the API service offered by the container. Essentially, the Pi\u0026rsquo;s 8080 port acts as a bridge, allowing users to reach the container\u0026rsquo;s port 8080 and access to the API service.\nHere is the folder structure # Remember to place all mentioned files in the same directory.\n3. Build and run the Docker image # Once you\u0026rsquo;ve completed all preliminary setup steps, you can utilize Docker Hub or the SCP method to transfer the entire folder to your Pi. Before executing the build and run Docker commands, ensure that you have installed the docker.io and docker-compose packages on your Pi. Then, head to the directory where your docker-compose.umm resides and simply run command**:**\ndocker-compose up Wait for everything done and then just go to the public URL provided by Ngrok when running “ngrok http 8080” and route “/messages”. There you go! We can get JSON data from the PI’s MariaDB database via a public address!\nInitially, my preference leaned towards using C# and ASP.NET for crafting the backend of my RESTful API application. The intermediate language level of C# promised better performance, especially for backend tasks. However, upon delving deeper, I encountered compatibility issues with the .NET platform in Docker container environments. Consequently, I pivoted towards using Express.js.\nThere is one thing I would like to remind you of again. For this project, a total of two Ngrok public URLs were used. The first one was created to establish a public TCP connection in order to make the PI\u0026rsquo;s MariaDB server public. The second one was created to establish an HTTP connection so that the container\u0026rsquo;s API service can be made public. Because one Ngrok account can only have one free public tunnelling endpoint, in this case I use two different accounts.\nOriginally, I intended to create two containers directly within the same Docker network, with one handling the API service and the other handling the database service. However, I couldn\u0026rsquo;t find a suitable MySQL image for modeling on my aarch64-based Raspberry Pi, so I ended up using this approach instead. I hope everyone likes it :)!!!\n","date":"18 April 2024","permalink":"/posts/host-restful-api-with-docker/","section":"博客","summary":"In this guide, we\u0026rsquo;ll explore how to host a RESTful API with MariaDB 10 on a Raspberry Pi using Docker, Express.","title":"How to host Restful API with MariaDB on Raspberry Pi using docker image, express.js and Ngrok"},{"content":"其實我也沒那麼懶。\n","date":"18 April 2024","permalink":"/authors/sloth/","section":"作者","summary":"其實我也沒那麼懶。","title":"Sloth (Raymond)"},{"content":"","date":"31 March 2024","permalink":"/tags/coop/","section":"標籤","summary":"","title":"coop"},{"content":" Our Life and Thought Pieces ","date":"31 March 2024","permalink":"/categories/life/","section":"分類","summary":"Our Life and Thought Pieces","title":"日常札記"},{"content":"","date":"31 March 2024","permalink":"/tags/%E5%8A%A0%E6%8B%BF%E5%A4%A7/","section":"標籤","summary":"","title":"加拿大"},{"content":"","date":"31 March 2024","permalink":"/tags/%E6%AF%8F%E6%9C%88%E5%B0%8F%E7%B5%90/","section":"標籤","summary":"","title":"每月小結"},{"content":" 什麼時候都不晚 本月Milestones # 搬新家啦 # 在三月的第一天搬到了美麗的新家！這間房是房東之前作為airbnb房源出租的，裝修陳設都是一等一的好看，地理位置也特別便利。房東人很好，甚至還保留著之前做airbnb房東提供服務的習慣——我們搬進來時各層的洗手液都是被refill滿的，浴室儲物架上堆著備用廁紙和好幾條毛巾，垃圾袋有好多盒補充裝，餐具碗碟、清潔用品也是應有盡有，我們主臥甚至還自帶一把電競椅。租房這麼多年第一次見到這樣的待遇！\n總之一個月住下來幸福指數超高，本篇的題圖就是我們漂亮的小客廳，誇誇Sloth勤奮地刷Kijiji找房子最後撿到了這個寶貝！\n拿到dream offer # 在三月的最後一個星期收到了dream offer，才算從此前被撕offer的低氣壓中徹底走了出來。申華納UX/UI Designer這份工時我心裡其實是沒底的，但我的原則就是申了再說，申了再說的結果就是有一天我在現公司廁所摸魚時電話響了，我猶豫了五秒鐘接還是不接——我在噓噓，廁所隔間剛進來了個同事，我不知道這通電話關於什麼。五秒後還是下意識地做了接電話的決定，然後在這樣尷尬的場景下完成了我的first phone screen interview。我的嘴回答得比腦子快，事後我也想不起來到底回答了啥，只聽到HR說great，that\u0026rsquo;s what we wanted，會再email和我聯繫確認面試時間。\n面試共進行了兩輪，二面完之後我一度陷入「我的表現是不是不夠好」的懊惱，開始假想自己一週三個面試面到最後一無所有的最壞情況。好在這種心態第二天就被打破——HR發郵件說他有一個great news for me，那除了offer還能是什麼！我literally滿屋子亂蹦，午飯剛做完都顧不上吃，幸福得暈頭轉向。\n坦白說我並不是一個擅長visual design或對美學有敏銳感知的人，畫畫也很爛，我從沒想像過自己有朝一日能和designer的title掛鉤。但既然他們兩輪面試完都覺得我可以，那我就是可以的吧！要自信起來！\n第一次報稅 # 這是第一個合資格的報稅季，我選擇的是免費的WealthSimple在線報稅，和對象以common law partner的身份一起報了。整體體驗還不錯，問題明瞭易懂，需要的稅表文件只有學費T2202、兼職收入T4和銀行利息收入T5。疑惑的點是看其他人分享動輒上千的退稅，怎麼到我這就只有一百多刀呢？除了學費credit等背景差異因素以外，一個可能的解釋是WealthSimple的Refund這一欄顯示的只是個人基礎退稅，其他人分享的「退稅金額」包括了政府在個人報稅後發放的各種補貼，在Summary裡可以看到明細和預估金額。季度的消費稅、碳稅補貼和月度的租房補貼相加起來的錢就很可觀了。\n想吐槽的是CRA My Account的註冊流程讓我費解了好一陣子：首先要完成第一年報稅之後才能註冊帳號，WealthSimple提交報稅後我的郵箱裡很快就收到了CRA的Notice of assessment，裡面的next step只說If you don\u0026rsquo;t have My Account, go to the CRA web page to register，我立刻想去註冊卻被頻繁報錯。因為報錯5次帳戶就要被鎖了，我就擱著不再試了。Sloth聽說要激活CRA帳戶得先收到他們郵寄到家的security code，我們左等右等都沒收到這封信。我不死心又去網頁重新嘗試註冊——成功了，原來需要多給它一點時間反應，而且成功之後才填地址信息等著收security code激活全部功能！我還以為它會從我的報稅單裡自動提取地址呢= =\n博客更新 # 已發布 # 加拿大Co-op經驗談：寫了許多篇個人向的生活博客之後，這可能是最稱得上「乾貨」的一篇。收到了不少反饋說受到了鼓舞/很受用，久違地感覺到了有價值的文字分享和互動帶來的滿足感。好快樂喔！ 小裝修 # 友鏈+2：是博客開張以來第一次收到友鏈邀請！我知道email互動的方式會在開頭就勸退好些人，所以感謝你們跨越萬水千山不怕麻煩地聯繫我！🙇‍♀️ ","date":"31 March 2024","permalink":"/posts/mar-2024-recap/","section":"博客","summary":"什麼時候都不晚 本月M","title":"除舊佈新，三月也可以像新年"},{"content":"","date":"31 March 2024","permalink":"/tags/%E5%A0%B1%E7%A8%85/","section":"標籤","summary":"","title":"報稅"},{"content":" 祝大家都能順利上車下車！ 這兩天剛剛拿到了第二個學期的co-op offer，想趁熱乎來梳理和分享下找工和面試的相關經驗，順便追趕一下博客更新的kpi（年初：我要保持bi-weekly的產出！三月：從容地在月尾開始動筆）⋯⋯\n提前申明本文回答不了「什麼專業好找co-op」等類似問題，硬要回答的話就是哪種專業本身就業市場大就好找co-op（好像在說廢話），主要是我也就在我的專業找過co-op，根本沒有橫向比較的能力啊！\n什麼是co-op # 不熟悉加拿大教育制度的人一開始看這四個字母可能會很陌生，但簡單搜索一下就知道它的全稱是cooperative education，是在加拿大很受歡迎的一種教育模式，相當於college/university program裡包括的帶薪實習。通常一個program會有co-op和non co-op兩種選擇，前者會要求學生完成兩個或以上的co-op學期才能畢業，如果找不到工作——是的它並不會給你分配工作，就會被轉到non co-op version提前畢業。兩者課程量相同，唯一區別就是在讀的時間長短和積累的工作經驗多少，適合不同目標的學生選擇自己的路徑。\n和傳統理解的internship相比，co-op主要有這些區別：\n必須帶薪，internship可以unpaid，co-op不行； 必須full-time，internship有可能一邊上課一邊打工，co-op要求全勤上班； 以學期為時間單位，視為學期的一部分。internship時間長度更為靈活，短如summer internship，長如graduate internship，無所謂； 受更多資源支持，公司/政府部門提供co-op職位會有稅收減免或者funding，學校有專門的co-op department搜羅盡可能多且對口的工作機會供學生申請；internship可能更需要靠自己撒網找。 我的找工歷程 # 背景簡介 # 文科轉碼選手，曾經在暴大學新聞，畢業即失業，最後在家外企幹了兩年PR，2023年初入學Algonquin College的Web Development and Internet Application。坦白講當時轉碼也沒做太多資料搜集，純粹著急跑路。我只有一個（對自己適用的）信念：我知道讀college可以零基礎開始學，那我就學什麼都能行。\n準備階段 # 一開始也很緊張自己能不能如願找到co-op，一月才入學，九月就要開始找第一份co-op實習，那時候我真的準備好了嗎？與其提問不如行動，我把這個時間線記在腦子裡，上完第一個學期的課就覺得自己有能力徒手搭一個portfolio網站了，並這麼做了。在九月的co-op job search term之前，我花了許多時間去做一些side projects完善portfolio，搞一兩個有的沒的且不要錢的certificate（我窮），探索這個領域裡我確實更感興趣的細分內容⋯⋯\n我出來的時候沒想著給自己留回頭路，所以我想要為每一個機會fully prepared。除了提升專業能力之外，我也開始認真拾掇自己基本從零開始的LinkedIn Profile、用Cambly復健口語能力/模擬面試。我聽說了加拿大對本地經驗的重視程度，於是我積極找part-time，最後在學校tims打了一學期工，為的就是在簡歷上加多一條本地經歷，也更能證明自己的所謂communication abilities。\n我不知道這些準備裡哪些是無用功、哪些真的讓recruiter注意到了我。作為回顧，我覺得它們最大的用處是一遍遍幫我確認：I\u0026rsquo;m ready and I am not throwin\u0026rsquo; away my shot。盡人事聽天命，我至少做足了我能做的那部分。\n實戰結果 # 第一個job search term順利得有些不可思議，我在round1投了40多份申請，只有1個面試，然後就收到了offer。因為公司和職位本身都不錯，我毫不猶豫地就接受了。\n第二個就很烏龍了，spring term的職位明顯少了很多，我在round1只投出18份申請，收到了2個不同政府部門的面試，結果都給了我offer，在沖天的喜悅中頗經歷了一番心理掙扎才選定一個婉拒另一個。\n我本來美滋滋地以為就這麼圓滿結束了，但天就是不遂人願。在花了差不多一禮拜時間填完臭長的security screening form後，突然來了封郵件說\u0026quot;I’m afraid to tell you that Government of Canada rules on hiring priority meant we had to offer the position first to a permanent resident of Canada.\u0026quot; 我到嘴的offer就這麼飛了——飛了——。這應該是一個非常小概率事件，原則上雇主應該在job posting裡就寫明身份要求，或者在篩選candidates的過程中就以該要求為先。我最無語的是他們在邀請我面試前甚至發郵件問過我的身份，但還是決定給我發offer，最後時隔一星期卻用這個理由又撤回了offer。心好痛啊！之前拒的另一個offer也早已依據排名順位給了下一個人選，我不得已又要重新開始投簡歷。\n這麼重新一投就是艱難的兩個月，合適的職位不多，和round1加起來我也只投出了36份申請，前前後後4個面試，所幸最後收到的唯一一個offer就是我的dream offer——Warner Bros Discovery的UX/UI Designer！塵埃落定之後甚至有點感謝之前那個插曲，如果沒有它我也不會有今天這個更理想的offer。一句老土的話已經湧上心頭：一切都是最好的安排！\n面試心得 # 我之前並不是一個很擅長面試的人，本科畢業後找了3個多月工作才終於拿到1個offer，那段時間的心理壓力還記憶猶新。也不知道是換了專業還是換了環境的關係，在加拿大找工作我反而如魚得水。在4/7的co-op面試成功率支持下，我有信心來分享一些自己摸索出來的面試準備技巧：\nResearch - 找亮點，也找茬 # 收到面試邀請後去更細緻地了解這家公司這個職位應該是每個人都會做的事。我做research的目的就如小標題所說：找亮點，也找茬。找亮點是為了更好地回答Why this company/position類似問題，誇得好面試官也開心。找茬和我的專業有點關係，我會從web designer/developer的角度去觀察這家公司的網頁：它有什麼問題？有哪些值得改進的地方？這是我對這個職位的投入程度和自身細節觀察能力的最有力證明。我在面試裡提出有價值的改進細節的時候，無一例外都拿到了offer，這招我百試不爽。\nBQ - 不變應萬變 # 按STAR法則準備behaviour questions小故事也是一個必需環節。STAR法則是什麼全網都是答案，我不贅述了。最開始準備的時候會有點痛苦，但一旦想好了兩三個優質小故事奠定了框架，許多behaviour questions都能迎刃而解——同一個故事很可能同時包含了你的teamwork能力、解決衝突/問題能力、溝通能力。無論面試官問什麼問題，你都能迅速調出一個故事回應，並在敘事中重新強調和問題更對應的那一特質。最棒的是在多個interview並行時，我們有限的精力可以更多分給Research和Customize，BQ什麼的吃老本就好了！\nCustomize - 特別的愛給特別的你 # 忘記了從哪個友鄰的博客裡看了她的面試經驗（歡迎提醒我！），讓我眼前一亮的是她提到有時候會為面試準備一個簡短的PPT。雖然聽起來有點卷，但好處確實是顯而易見的：掌握面試流程的主動權、突出自己的用心良苦、更容易讓面試官留下深刻印象。我在準備和華納的面試中想起了這一招，驚喜地發現很適用於我自己的情況：我沒有很強很fancy的design portfolio，我不想被動和面試官walk through我更developer導向的portfolio或resume；我過往的工作和學習經歷或多或少都沾一點design相關的projects，做PR的工作經驗經常讓我和客戶的brand guidelines打交道⋯⋯通過短短四頁的slides，我可以把我的經驗和優勢以更針對性、更有條理的形式呈現出來，同時提前回答了「和其他競爭者相比你有什麼優勢」之類的常見問題。實踐之後的感受就是：好用！喜歡！缺點是比較費時間和精力，不太適合頻繁使用。\n除了像PPT這樣的大殺招之外，我還喜歡給我非常感興趣的interview想一些獨特的、有趣的話頭作為閒聊的談資（寫到這裡我突然福至心靈：這不是就是北美職場文化最喜歡的fun fact sharing環節！），這是建立connection非常有效的一種方式。比如我第一個co-op面試的公司logo是綠色的，我就提到我最喜歡的顏色也是綠色，上家公司和現在學校的品牌色也是綠色，如果我能繼續在一家綠logo的公司工作就有趣了。Again我不知道面試中具體哪些表現幫我獲得了offer，但這個小技巧至少逗笑了我當時的面試官，也讓我們聊天的氛圍更愉快了。\nPractice - 不必多說也要說 # 反覆練習的重要性不必多言了吧！我的口語水平並不能使我像母語者交流那樣自然流暢，我也經常想表達某個想法而突然在中間卡殼。對此我的訓練方式就是在面試前反覆練習、自問自答。憋在心裡演習是不行的，一定要大聲說出來，說出來才能更直觀地感受到哪裡不連貫或者值得改進。練習的另一個好處是可以提前搜索一個詞語或句子更好的表達方式，它們原本不在你的知識庫裡，你搜了+練了，它們就在你的腦子裡扎根了。\n要強調的是practice並不等於死記硬背，堅實的英語基礎、靈活應變的表達能力還是很重要，不然在面試中也是很容易露餡的。作為第二語言的使用者，我們不應該給自己施加「一定要講完美的英語」的心理壓力。你講得出來，對面聽得懂，交流除了這兩點還需要什麼嗎？\n不負責的數據與建議 # 「在加拿大找co-op容易嗎？」我還蠻經常聽到這樣的問題。光從我個人經歷來看，找co-op好像不是特別難，有些小插曲但整體也順風順水。但我也知道同項目成功找到co-op的同學比例並不算高，認識的面孔裡掰著指頭能數出來十個左右（Sorry，好沒有參考性的一個數據），整體數據不了解不能斷言。\n從我有限的經驗裡可以再補充三點（不負責）建議：\n不要局限自己的選擇。 找工的原則是海投，co-op池子也不大，再精挑細選的話能選擇的餘地就太小了。收到offer才是認真做選擇的時刻。 私企的offer比政府工更可靠。 政府工招收citizen/PR的preference和冗長的security screening有時候很致命。我栽了第一個跟頭，which is not my fault but totally out of my control，我也聽說有些同學因為security screening遲遲未完成而失去co-op機會，被迫take a break/轉為non co-op。當然這不是說政府工不好或者不要接，學校job portal裡政府部門的job postings不少，我也認識一些國際生同學順利進了政府上班，總之一看個人選擇二看命。 入學時間以秋季為佳。 為什麼呢？因為秋季入學排到的co-op work term就是在秋季和冬季（以兩年制college學期規劃來看），我認為是co-op job postings相對最多的時間。春季真的肉眼可見的選擇少，能避則避。 我的最後一條建議是，與其反覆糾結加拿大找co-op容不容易，不如行動起來做一個有準備的人。祝大家都能順利上車下車，走上自己想走的任何一條路。\n","date":"29 March 2024","permalink":"/posts/coop-sharing/","section":"博客","summary":"祝大家都能順利上車下","title":"加拿大Co-op經驗談"},{"content":"","date":"29 March 2024","permalink":"/tags/%E9%9D%A2%E8%A9%A6/","section":"標籤","summary":"","title":"面試"},{"content":"","date":"29 February 2024","permalink":"/tags/%E6%9B%B8%E5%BD%B1%E9%9F%B3%E9%81%8A/","section":"標籤","summary":"","title":"書影音遊"},{"content":" 渾渾噩噩不知所以然 二月雖然說是農曆新年的起點，我卻好像陷入了意義的虛無感。這麼形容又有點太端著，不如直接承認是提不起勁做任何事。To do list上的目標和瑣事也不少，但也正是因為不少而感到煩躁和無從下手。看了一些關於提升效率和時間管理的文章，很佩服能執行的人，但實踐一種新方法論、習慣一種新工具所需要的時間和精力總是讓我望而卻步。也許以後會再嘗試吧，這個月允許自己頹廢。（反正都要過完了）\n本月Milestones # 通關曠野之息 # 二月提不起勁做任何事，玩賽爾達除外。從去年12月初入手到2月尾開完所有神廟+通關，已經玩了超過185個小時了。而直到最後幾個小時它都在為我提供新的驚喜感——比如遲遲才發現路邊廢棄馬車如果掛了串小瓶子也可以觸發呀哈哈，我恨！不知道錯過了多少輛馬車啊！\n已經開始想念一個沒有玩過塞爾達的腦子，好在還沒買DLC和王淚，暫時不會和海拉魯告別，我還會回來的！\n緩慢重拾閱讀習慣中 # 如果說二月還有什麼值得肯定的，那可能就是讓自己從原本日均為0的閱讀時間增長到30min以上？不是什麼多了不起的成就，但日積跬步，志在千里嘛！說起來我想在渥太華公立圖書館辦卡很久了，之前在網上嘗試申請過兩次都以失敗告終，希望3月可以抽個時間去branch線下辦理。主要是想在圖書館借switch遊戲卡帶玩，噓！\n接連放棄Duolingo和Cambly # 恬然無恥地加上了這一條，怎麼不算是一種milestone呢，我放棄我驕傲。放棄的原因是在這兩件事上，打卡和上課都逐漸成為了一種形式性的堅持，增添了心理壓力不說，也並沒有真正學到或吸收什麼的實感。這當然和我沒有做系統性的鞏固和複習有關啦，但客觀來看我也不那麼需要這兩個app了。想學習新語言之後會優先考慮busuu，想練口語就直接揪身邊的母語者嘮嗑。總之我這是有智慧的放棄，值得肯定！\n本月碎碎念 # 到嘴的offer又飛了，操！ # 本月最懊惱的烏龍事件——說好的offer在時隔一星期後又被撤回了，理由是他們需要優先把offer給PR。根據學校程序這樣的做法無疑是不合規的——雇主應該在給offer之前就考慮全面所有因素給出ranking，學生在接受offer後就不被允許再申請其它工作機會。我在round1接受了這個offer，為此拒絕了另一家的offer，還不能再投round2的工作機會，結果要在round3一切從頭來過。這是我2月受到的最大打擊，唉，說多了徒增傷心，還是收拾收拾心情move on吧。\n申信用卡的彎彎繞繞 # 看見Costco有個辦黑卡新會員給120刀網上購物coupon的活動，等於是減免了開卡費，於是高高興興辦了會員。想著順便申一張CIBC的聯名信用卡最大化cashback收益，結果被告知持學簽身份在CIBC只能開一張信用卡，而且Costco這張卡只允許PR or citizen申請。這是我2月在PR問題上遇到的第二個坎了！崩潰！\n最後申了一張Rogers Mastercard，無年費，據稱所有消費都是2%cashback，用來抵扣話費帳單算3%cashback，聽起來是很無腦的好用，希望能審批通過吧！\n博客更新 # 已發布 # 低消費慾人群的超市回購清單 - Grocery：不誇張地說，不計生鮮蔬果和肉品，我和對象逛超市時常買的東西90%都在這張清單上了⋯⋯這讓我們每次逛超市的行程都挺高效的，但同時也——有點無聊。我想試新嘢！（被對象捂住嘴拖走，這個人喉嚨痛連龍角散都不肯試，無語！） 折騰裝修 # 更新了 友鏈界面：加上了我的常看博客清單，屬於沒有雙向互動過但又很想推薦這些博客給其他人看。當然一時半會兒加不完，那就慢慢來唄。 新添neoDB卡片：從椒老師的裝修博客種草，然後追蹤到了另一個博客裡的這篇 教程，立刻抄上了！第一次整短代碼開頭還有點懵，但找對文件需要儲存的地址一切就迎刃而解了！neodb.html要存在layouts/shortcodes文件夾，css要存在assets/css/custom.css，路徑上哪個folder本來沒有就新建一個，done！ 書影音遊 # 書籍 # 饥饿的盛世 8 本书内容主要写乾隆时代的得与失，作者通过对乾隆时代的解构，为读者描绘了一幅五彩斑斓的“盛世”图景，同时深刻揭示了近代中国失落的秘密。 乾隆统治下的中国，纵向比，是中国之前几千年历史中人口最多、国力最盛的时期。横向比，是当时世界上最强大、最富庶的国家。称之为中国历史上最大的盛世，毫不为过。乾隆时代创造了空前的政治稳定，养活了数量空前的人口，奠定了今天的版图。但是，作者从更深的层次看到，表面的繁荣昌盛背后，隐藏着的，是巨大的危机。 乾隆在位六十年，正好是英国经历了产业革命的全过程。乾隆十三年（1748年），孟德斯鸠发表了名著《论法的精神》。乾隆四十一年（1776年），美国宣布独立。乾隆五十四年（1789年），法国爆发资产阶级大革命。 而在地球的另一端，乾隆皇帝沉浸在“盛世”的梦境中不能自拔，想尽一切办法维持他的封建统治。可以说，中国在这个时期，错失了与世界文明接触的机会，没有赶上世界发展的大潮。这直接导致了中国接下来的持续衰落，甚至沦落为“东亚病夫”。 另外，本书还对乾隆的出身个人生活，性格等做了介绍。 book 讀了大概一半，很通俗易讀的歷史讀物。讀這本書之前我對乾隆的印象大概還停留在還珠格格的皇阿瑪= =現在會有一個更立體的理解：精明而殘忍，偽善而刻薄。讀的過程中數度嘆了好多口長氣，書中描繪出的高壓的專制氛圍，那麼遠那麼近，我們依然陷在歷史的泥坑裡爬不出去。\n電影 # 过往人生 7.3 本片讲述一对在韩国相遇，过着平行生活的青梅竹马长大后重逢的故事。 movie 電影比這一句話的簡介好看很多。與其說它是一部愛情片，我會覺得它明明是更聚焦於Nora自我的移民文藝片。出走了的人，我們怎麼回頭看我們的來路，我們怎麼繼續我們的選擇，我們內心深處那些細膩、敏感、隱忍而充沛的情感，都是可以投射在這部電影中的。 首尔之春 8 影片以1970年代末动摇韩国近现代史的实际案件为基础展开故事。 movie 期望值設太高了未免有點失望，但——確實需要這樣的電影來記錄和傳播曾經切實發生的事，英雄牆和恥辱柱上的人。喜歡結尾合照對新政府/草台班子成員逐一定格放大介紹的畫面設計，沒有畫外音但觀眾腦子裡會自動配音：你們這群垃圾。\n動漫 # 动物狂想曲 第一季 8.7 在全宿舍制的切里顿学园里，羊驼提姆被什么人吃了。 在肉食兽和草食兽共存的世界中，这是最大的禁忌，也是无法超越的种族的墙壁。这是大灰狼雷格西（17岁）和各种各样的动物交织在一起，激烈的、悲伤的青春群像剧！！ tv 动物狂想曲 第二季 7.9 在全宿舍制的切里顿学园里，羊驼提姆被什么人吃了。 在肉食兽和草食兽共存的世界中，这是最大的禁忌，也是无法超越的种族的墙壁。这是大灰狼雷格西（17岁）和各种各样的动物交织在一起，激烈的、悲伤的青春群像剧！ tv 連著追完了兩季，很有意思的世界觀設定：草食和肉食動物共生的世界裡，肉食動物要如何面對自己的食肉本能，草食動物要如何平視自己的位置。它讓人不可避免地聯想、反思社會關係中強勢和弱勢、男性和女性的連結和矛盾，但又能完全跳脫出來在動物的話語裡自成體系——難以用人的道德倫理去理解的時候，不如回歸到動物的邏輯再試試。\n綜藝 # 全员加速中·对战季 0 实境生存挑战真人秀《全员加速中2024》，结合中国故事，引领元宇宙综艺的3.0时代，升级加速阵容、加速主题、加速科技带来更强品牌吸附力与营销空间，以技术赋能内容生产，打造具备全感官沉浸式体验。 tv 救命這個簡介也太讓人尷尬了⋯⋯拋去那些必須被植入的中國特色宣傳元素（我的眼睛已經學會自動過濾了），我還是看得很開心的。0713 vs 院人，兩邊都是很放得開又有腦子的內娛活人，愛看，尤其愛看南北在高強度的節目節奏裡互信互賴的樣子。有南北/院人的綜藝就有我，我這半生四年算是被芒果坑進去了。\n","date":"29 February 2024","permalink":"/posts/feb-2024-recap/","section":"博客","summary":"渾渾噩噩不知所以然 二","title":"迷失了的二月"},{"content":"","date":"29 February 2024","permalink":"/tags/%E5%8D%9A%E5%AE%A2%E8%A3%9D%E4%BF%AE/","section":"標籤","summary":"","title":"博客裝修"},{"content":"","date":"11 February 2024","permalink":"/tags/%E5%90%83%E5%90%83%E5%96%9D%E5%96%9D/","section":"標籤","summary":"","title":"吃吃喝喝"},{"content":" #Blog逛超市安利大會 我和對象都屬於是日常消費慾望較低的人，只有每週一次的逛超市是雷打不動的例行任務。去超市買什麼？我不僅有選擇困難症還有嚐鮮恐懼心理，出於口味差別的原因對加拿大的加工食品和冷凍食品都沒有信心，在沒有做功課或者被種草的前提下很少會主動購買沒試過的產品。但是！只要是買過一次讓人滿意的，就會頻繁在我的購物清單上再度出現，成為一個安全可靠的長期選擇。\n雖然說蘿蔔青菜各有所愛，但分享下我的回購清單多多少少也可當個參考。以下推薦完全沒有廣告價值（我不值得），也不會有鏈接，我最多提下主要是在哪個超市買的。也歡迎友鄰在評論裡或者另起一篇blog嘮嘮你們的日常愛買選品，想被種草！\n生鮮 # Melon Honeydew # 所有水果裡最喜歡這款蜜瓜，請認準honeydew！它很甜，但是相比cantaloupe的甜膩，它會更清新一點。我們一年裡買了超多次，我對它的價格也瞭如指掌：打折5.99-6.99一個，平時7.99。我們多數是在Loblaws買，唯一一次不怎麼甜的是在Real Canadian Superstore買的個頭相對小點的蜜瓜。Loblaws的個頭通常蠻大的，買回家切一切分裝，兩個人都可以吃兩三天，一個人吃怕壞的話可以放一半去冷凍。\nApple HoneyCrisp # 我初來乍到的時候逛超市看著整行的不同蘋果種類就很懵圈，不知道買哪種好。我脆蘋果和面蘋果都吃，喜甜不喜酸，HoneyCrisp是個人相對不踩雷的選項，Mcintosh已經被我拉黑（也不是酸的問題，覺得皮很厚，口感很澀很硬），gala時好時壞。因為不是資深蘋果愛好者，其實也沒有買過很多次，但下次如果再買的話我會從honeycrisp、opal、sugarbee、ambrosia裡面選，這四種是小紅書的北美蘋果分析帖裡較多被推薦的品類。再附一張網上找的蘋果甜酸度對比表（這個劃分很簡單粗暴，僅供參考）： 乳製品 # Neilson half \u0026amp; half cream # half milk half cream，我們家最喜歡的咖啡伴侶。最開始知道half half是因為受小紅書推薦在Starbucks點了杯 iced shaken espresso with half and half，一喝又確實好好喝喔，成為了我的星巴克固定點單選擇之一。星巴克用的其實也是超市開架牌子的half half，我不記得具體是哪個牌子了，但應該都差不多，neilson這款也不錯。\nPhiladelphia cream cheese # 吃過原味（light）、herb\u0026amp;garlic和mixed berry的cream cheese，都好吃，抹烤麵包或者bagel一絕。方便快手的早餐搭配選擇。\n黑白/三花淡奶 # 家裡常備淡奶是為了隨時可以做 譚仔，作為湯底調料黑白和三花都買過，吃不出分別，黑白只是多一點港式奶茶情懷，煮奶茶會更合適。西人超市的話三花比較容易買到，看了眼網站walmart最近打折才1.27一罐，與此同時大統華賣3.29(｡ŏ_ŏ)。\n買淡奶最大的煩惱是開罐後的保存問題，如果不及時處理容易變質甚至發霉。我們家試過開罐後全部倒進密封袋放冷藏儘快消耗，但最近我想出來的一個天才對策是倒冰格冷凍成小塊，可保存時間更久而且也容易計量取用～\nSilk豆奶 # 我最喜歡的豆奶牌子（說得好像我有橫向比較過很多其它牌子似的），每次都是兩盒1.89L的直接抱回家。買的時候要注意看它頭頂的標籤，有unsweetened、original和vanilla的區別。我之前不怎麼留意，很少買到original的，unsweetened的是真的一點兒不甜味道比較淡，vanilla其實不會太甜反而我很喜歡。\n零食 # 我不太愛吃零食，這個大類下的items主要是平時逛著逛著突然就被Sloth又又又又丟進了購物車的東西——但買回家之後我也會搶著吃就是了(๑´ڡ`๑)\nPC Jalapeño薯片 # Jalapeño是最受歡迎的一種墨西哥辣椒，在國內時沒有聽說過，但是在加拿大還蠻常見的，應用範圍也很廣——tims就有Jalapeño bagel和Jalapeño pastries（我在 tims菜單點評 裡就提過我很喜歡它的Jalapeño pastries）。PC這款薯片也很好吃，辣辣的很上癮。PC是loblaws的牌子，所以只能在loblaws旗下超市買到，但這個口味的薯片其實各個牌子都有，只是因為我們第一次吃是PC的就忠實於它了。\nRicola喉糖 # 把喉糖歸類在零食裡好像很不尊重喉糖，但這就是喉糖在我心裡的定位(〃∀〃)。我們最常買的是original herb口味（根本就沒有試過其他口味），一股淡淡的藥草味很迷人，會讓我莫名想起廣東涼茶。Sloth說他小時候在廣東已經很喜歡吃這個糖，但他不認同像涼茶味LOL\nKinder Bueno繽紛樂 # 也是Sloth的摯愛。很奇怪，他不吃其它任何巧克力，但是唯愛這款繽紛樂。想抄一下健達官網對這款產品的介紹：「健達繽紛樂，牛奶巧克力加上威化外層, 含綿滑牛奶及榛果內餡。獨特口感，多重享受。」確實挺好吃的，我覺得是肚子餓時很適合飽腹救急的一個選擇（好實用主義的一個出發點），上晚課時摸兩顆出來吃吃很方便。\n飲料 # Canada Dry # 我對poutine是加拿大國菜感到嗤之以鼻，但canada dry一定是當之無愧的加拿大國寶級汽水！它主打的是ginger ale薑汁汽水，我只買過原味的，並且因為原味的已經很經典很好喝暫時沒考慮過試其它味道。我覺得不喜歡生薑味和不喜歡ginger ale是兩碼事，反正後者也沒多少生薑含量，它更像是一種味道層次更豐富的雪碧= =。來了加拿大我第一推薦這款汽水！\nNESCAFÉ GOLD Espresso速溶咖啡 # 還沒有擁有自己的咖啡機，所以在家都是喝速溶湊和湊和。我不想在貨架上盲買，雀巢NESCAFÉ GOLD系列是我做了些功課後看到風評最好的速溶咖啡了，買完也沒有失望，沖出來油脂很豐富很香很好喝，就一直接著買下去了。Loblaws一般商品標價其實都偏高，但很神奇的這款咖啡定價還低過平民超市walmart，200g12刀，抵買！\nT\u0026amp;T茉莉綠茶 # 大統華牌子的茉莉綠茶，但是在loblaws買也比在大統華買便宜，2.49刀和3.95刀的差價。茉莉綠茶應該很難不好喝吧！西人超市賣的大多是需要沖泡的茶包，我們圖方便且想喝冷茶的時候就會直接倒這個，甜度也合適。Loblaws沒見過無糖款，但大統華官網的無糖款評價也不錯。\n雪糕 # 哈根達斯抹茶/咖啡 # 如果說有什麼在加拿大買是比國內買划算很多的，那一定是哈根達斯了。兩大罐450ml的常見打包價10刀，換算起來幾乎是國內單價的七分之一，我們基本上每隔兩週就買兩罐⋯⋯每餐飯後都舀幾勺吃吃好幸福。因為不嗜甜，所有口味裡我們只喜歡抹茶和咖啡，甜中帶苦的味道是最迷人的不接受反駁。\n樂天Mochi香草味 # 在Walmart淘到的樂天香草味的雪糕糯米糍，一口一個超好吃！能進這個貨我覺得Walmart採購真的很有眼光，美中不足的是太受歡迎時常缺貨。在我們家附近的Walmart它通常被擺在冰櫃的最高一層，我們每次都要跳起來去夠最裡面剩下的一盒或者兩盒⋯⋯這款糯米糍隔壁還會擺另外一個牌子buono的混合口味糯米糍，餘量總是很多aka沒人買。我試過一次，很後悔，只能說沒人買是有原因的。\nMelona蜜瓜味 # 是Sloth介紹給我的他在香港時就很喜歡吃的雪條，是一個韓國牌子，發現加拿大也有還怪驚喜的。我們吃過蜜瓜味和椰子味，最常買的還是蜜瓜，很清爽，不齁甜。蜜瓜味的雪糕好像還挺少見的，感謝melona開發這個口味的產品並且打下加拿大市場(｀･ω･´)ゞ\n這個回購清單寫下來確實也——不怎麼長，而且和加拿大本土的關聯性也不是特別強= = 看得出來我們買得很保守挑的還大多是國際牌子。但是買得開心吃著好吃就好啦！日子過著過著超市逛著逛著也總會開拓新的嘗試的。\n我們平時常去的超市主要是Loblaws、Walmart和Food Basics。因為最近有了腿 買了車，下個月開始應該會更多去Costco購物，隔個一年半載可能會再更新下這個Grocery回購系列，歡迎和我推薦Costco什麼值得買！\n","date":"11 February 2024","permalink":"/posts/grocery-shopping/","section":"博客","summary":"#Blog逛超市安利","title":"低消費慾人群的超市回購清單 - Grocery"},{"content":"","date":"11 February 2024","permalink":"/tags/%E9%80%9B%E8%B6%85%E5%B8%82/","section":"標籤","summary":"","title":"逛超市"},{"content":" Books, Games, Music, Movies, Dramas, and Things ","date":"11 February 2024","permalink":"/categories/review/","section":"分類","summary":"Books, Games, Music, Movies, Dramas, and Things","title":"萬物測評"},{"content":"","date":"31 January 2024","permalink":"/tags/%E4%BA%8C%E6%89%8B%E7%B6%93%E6%BF%9F/","section":"標籤","summary":"","title":"二手經濟"},{"content":" 我太厲害了！ 本月Milestones # 幫朋友搭博客中 # 一月伊始， 多倫多多狸找到我說「一定要搞一個博客了！」那我可太開心了，當即自告奮勇攬下了這個任務！我在 當一個忘性很大的人嘗試寫十一月小結中提到過我很喜歡現實生活中不少朋友的文字風格，她就是其中一個我想拽進博客宇宙的對象。她關心創作、性別、移民、離散、故鄉，是我見過感受最細膩，又能將那些感受熱烈地書寫出來的人。\n我們現在博客名有了，基本排版搭好了，再做一些定制化的細節調整應該很快就可以出街了！喜歡看的博客又會多一個，開心！\ncoop工作開始了 # 正式開始了在加拿大的第一份co-op工作，很新鮮也很——輕鬆。一個星期只用去一次辦公室，平時工作量可能是我之前上班的10%，大多數時間都在自己實驗性地搗鼓sandbox或者找一些online learning resources。我特別喜歡我的supervisor，又supportive又talkative，我才上了一月班就敢開口要reference並且確信他一定會幫我講超多好話；跟他對話也完全不擔心冷場，他還特別愛分享自己的狗狗、烤架上的肉、用過的各種app工具。\n我被種草的一個app叫 proton，是旨在以瑞士隱私法的標準保障個人信息安全，提供包括郵箱、日曆、drive、VPN、Password Manager在內的一體式服務軟件。我supervisor說他現在所有個人資料都放在這個平台去管理，我也想試試。\noffer連連！ # 我現在在讀的這個program有兩個co-op work term，之前一度很擔心找不到實習何去何從，結果找coop的經歷好像如有神助：每學期都在第一輪收到第一個面試邀請後就拿到了offer。第一個學期只有一個面試所以毫不猶豫地接受了offer，這個學期收到了兩個政府工的offer，陷入了非常甜蜜的煩惱，最後還是諮詢了我現在的supervisor才下定決心選「聽上去工作內容更有趣」的那一個。\n以後回憶起這段經歷可以很驕傲地說，我的coop面試成功率是100%！可以考慮之後開個坑寫寫面試心得了，如果有人想看的話。\n本月碎碎念 # 即將搬入夢中情屋 # 定下來三月要搬家啦！對象在kijiji上看到一個漂亮的房源出租，我們立刻約了看房，結果實物確實與圖片一致，沒有太多可挑剔的地方，性價比也超高，所以很快就和房東簽約了。看得出房東原本很愛惜這個房，我也想提高下日常清潔標準，希望我們住下來能繼續維護它現在的美麗和乾淨！\n二手經濟和TGTG # 因為要搬家也終於行動起來處理一些閒置物品，幫它們找到下一家覺得很開心，避免了它們整天吃灰塵或者落入垃圾堆的命運！還察覺到自己現在一個消費觀念的轉變就是，能買二手的就不去買新的，對錢包和地球都好。\n我喜歡逛渥太華本地的二手店鋪，像衣架、收納箱、碗碟，都是最值得在二手店淘的，衣物鞋履就完全看緣分。自己不想再穿的衣服也可以清潔整理好後打包送去回收，專門賣舊衣的店鋪會審核後低價購買，一些普通二手店鋪，像value village，受捐後還會提供donation coupon，怎麼都比壓箱底或者扔掉強。\n之前還種草了TGTG(Too good to go)這個以防止食物浪費為理念的app，參與的商家會在上面以surprise bag的形式低價出售多餘或者臨期的產品。我一月買了一次麵包盲盒，是一家評分4.7/5.0的麵包工廠，花了$4.99收到了6個ciabatta和4個pretzel，放冷凍每天拿出來復熱當早餐吃太合適了。對本次消費感到滿意！\n博客更新 # 已發布 # Tim Hortons菜單不完全點評：嘔心瀝血之作（？）！寫完了之後沒有一天是想吃tims的。驚奇地收獲了本站最高的瀏覽量，應該是全靠象友們repost了十幾次帶來的流量。很開心地看到是有象友跟著這篇blog去tims點了單還發了repo，能有參考意義這篇blog就完成它的使命啦。 我的人生廣東歌（二）：寫著寫著又不自覺loop了很多遍。稱之為「人生廣東歌」不是一種噱頭，我確實找不出一個更合適的描述去形容這幾首歌在我心裡的地位。我的回憶、經歷、情感、信仰，都糅合在其中了。 折騰裝修 # 之前每篇文章沒有顯示字數和閱讀時間，是因為我在這個主題的documentation裡沒有找到hasCJKLanguage這個參數，於是它只統計英文字數，就很雞肋。在給朋友搭博客的過程中突然看到了這個參數，搜了一下確定是hugo自帶的配置選項，立刻就加上了！ 參考象友白石京的 Hugo Stack主题装修笔记，也在footer加上了博客運行時間的統計顯示。因為主題不一樣，文件結構和路徑稍有區別。我是在layouts/partials/footer.html裡直接添加了如下代碼，樣式用bootstrap略作調整就完成了： \u0026lt;!-- Add blog running time --\u0026gt; \u0026lt;p class=\u0026#34;text-sm mb-1 text-neutral-500 dark:text-neutral-400\u0026#34;\u0026gt; This blog is live for \u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; and counting. \u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; let s1 = \u0026#39;2023-10-24\u0026#39;; //website start date s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); let s2 = new Date(); let timeDifference = s2.getTime() - s1.getTime(); let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); let result = days + \u0026#34; days, \u0026#34; + hours + \u0026#34; hours, \u0026#34; + minutes + \u0026#34; mins\u0026#34;; document.getElementById(\u0026#39;runningdays\u0026#39;).innerHTML = result; \u0026lt;/script\u0026gt; 看椒老師的這篇 Hugo 装修小记之二種草了很多功能設置，其中最簡單的大概就是在about頁面加足迹地图了。過去幾年走過的地方也算不少，這樣直觀地去看自己在世界留下的腳印還蠻有成就感的——我想要探索世界，没有停留在說說而已。代碼的話簡單粗暴地copy了Google My Maps的embedded code，只是把width換成了100%就搞定了。 \u0026lt;iframe src=\u0026#34;https://www.google.com/maps/d/u/0/embed?mid=1F-0INY2Xf_2fEAfuF3o0C1v-XE7FKXk\u0026amp;ehbc=2E312F\u0026amp;noprof=1\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;320\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; 書影音遊 # 因為12月回了次國，從mani手裡拿了本阿蒲的新書《有人自林中墜落》斷斷續續地看。之所以斷斷續續是因為——確實是沒什麼能讓我堅持看下去的吸引力⋯⋯我的讀了一半感：像在看一本網文實體書，又像在看一個遊戲的劇情文字印刷版。純粹是出於對作者的濾鏡在堅持啊！ 這個月看的東西都是輕鬆向的，看了《間諜過家家2》（我一直以為我早就看完了結果根本沒開始！）和《寶可夢禮賓部》，以及本著下飯綜藝的心態去看但是翻了無數次白眼的《單身即地獄3》和《名偵探學院7》——多寫幾個字來罵都是浪費我的力氣！ 還在玩《曠野之息》！打完了四個神獸，只打贏過一次人馬，還想用很多時間在海拉魯自由地奔跑。雖然開完了地圖，但肯定還有很多角角落落沒有去過，我再逛逛！救公主最後再說！ ","date":"31 January 2024","permalink":"/posts/jan-2024-recap/","section":"博客","summary":"我太厲害了！ 本月Mi","title":"成就滿滿的一月小结"},{"content":"","date":"22 January 2024","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"22 January 2024","permalink":"/series/%E4%BA%BA%E7%94%9F%E5%BB%A3%E6%9D%B1%E6%AD%8C/","section":"Series","summary":"","title":"人生廣東歌"},{"content":" 快樂嗎 你還是記得你跟我約定吧 拖啊拖啊拖了兩個多月的坑，終於在某個週日生產力大爆發一口氣寫完了。歡迎你來聽我的人生廣東歌。\n《哲學家》 # 演唱：盧巧音\n作詞：黃偉文\n作曲：Christopher Chak（擇日生）\n編曲: 陳珀\n監製: Alvin Leong\n我第一次聽這首歌是在2022年5月21日夜晚，何韻詩在她的goomomon網站上開線上演唱會翻唱了這首歌。很難再確切描述出當時剎那的感受，但說是「一擊即中」一定不會錯。即使到了今天再重聽，我也會跟著哼著盯著歌詞就控制不住流下眼淚。\n陪你上街 路人大概 不懂欣賞你 先知一世紀 難道你 過份美好 會令人退避 有些我 也未明白 猶幸我懂得 怎麽愛你 就等我守護 塵世之中 走太前的你 誰叫這 負能量時代 最開通的想法 都配你不起 明日我怕沒有 像你預言的美 但你一笑 繼續沉默 沉入了思考 不肯放棄 仍努力 給這 荒謬城市 多一個轉機 這首發布於15年的作品很明顯是對雨傘運動的callback，甚至仍努力給這荒謬城市多一個轉機的原詞也是催淚城市，直白不過地指向那段被催淚煙籠罩的時期。黃偉文也親口在Facebook發文剖白，坦言這首歌最初是想寫給三個姓黃的人：黃之鋒，黃耀明，還有他自己。\n哲學家，當然也可以是其他存著善意 那理論與見解 遭世人醜化卻抱持信念繼續沿路前行的人。何韻詩是，走上街頭參加社運的普通人也是。而我作為一個聽者，作為跟隨者，實實在在感激著這些先知先行的人的出現，也冀望著能一起走過這段長路，陪你在這片沙漠 捱到上天看到你，捱到世事有轉機。\n我也很喜歡原唱盧巧音的聲線，搭配這首歌的意境非常合適：既有一種「遙遠星體所派來的」出世的距離感，又帶著股悲天憫人的哀愁和棱角分明的堅硬。哎呀我嘴真笨。這不是最好的形容，那些感受非得你自己聽過不可。\n有些我也未明白，猶幸我懂得怎麽愛你，猶幸世上有這首歌。\n《最好的債》 # 演唱：楊千嬅\n作詞：黃偉文\n作曲：雷頌德\n編曲：雷頌德\n監製：雷頌德\n我本來沒有楊千嬅情結，聽她的歌也少，但偶然在B站推送裡點進了 2015年演唱會Live版的《最好的債》，對這首歌的愛就一發不可收拾。搜了一下聊天記錄發現我經常捧著這首歌的鏈接找人發瘋，被騷擾的不下五個（斯密馬賽）。\n沿著這首歌去重新了解了黃偉文和楊千嬅的關係變化史，很唏噓。不論決裂的原因是否是傳言所說的黃偉文不滿自己傾心傾力為楊創作的作品總是得不到重視，能確認的一個事實是自2005年以後黃偉文再也沒有為楊千嬅寫過一首歌，直到這首2015年的《最好的債》，歷時十年的破冰之作。這首歌像是《最佳損友》的延伸，卻比《最佳損友》多了更多開解和釋懷的意味。\n很奇怪，我自問並沒有一段貼切的相似經歷可以喚起共鳴，但聽這首歌時的代入感卻非常強。我完全被帶進了這個故事裡：自上次離去那一天 確實有太多機會可碰見，也要避而不見故作絕情；一想到以前 下著雪 還會有些暖 但共你也天生擅於冷戰，哪怕心底依然有柔軟的部分，誰都不願做先低頭認輸的那個；難道這惡鬥最尾人人都輸 人人敗給鐘點，在時間裡沒有人是勝者，傲慢被分解 怒火變靜態，其實哪有那麼恨；何必論成敗 懶去再結算 彼此欠的債，誰欠得多或少都已不再重要，也算與你相識於天涯 誰要計較那點失態。\n我喜歡這首歌的歌詞喜歡到每一句，最讓我心縮成一團的是這兩部分：如有空介意 其實只介意 怎麼我們會到此，那些大大小小的紛爭緣由都不值得被堅持介懷，最介懷只有「怎麼我們會到此」的遺憾；我恨你 恨到比宇宙更大 被年月壓縮到最小 紙碎一塊 隨風散落鬧市中 鋪滿在路過的街 我決定不帶，再多的恨意怨氣，如廢紙撕碎、丟棄，「我決定不帶」，最鏗鏘的宣告。\n我聽這首歌時心裡沒有一個對照著的人，但不妨礙這首歌在我心裡佔據一片重要的地位。我想它讓我成為一個更灑脫的人。朋友、愛人、家人，甚至是過去的自己，都可以成為這種愛與恨糾葛投射的對象，重點是如何與其和解。\n這首Live的最後，楊千嬅還唱著我只盼今生可釋懷 記掛與你分享的天涯 和你結過那些黨派，黃偉文就乘坐升降台上了舞台，抱著紫色花束，穿著野孩子圖案的衣服。楊小姐幾乎是泣不成聲地唱完你是最好那段債。\n《再不再見》 # 演唱：C ALLSTAR\n作詞：鍾晴\n作曲：賴映彤\n編曲：賴映彤\n監製：賴映彤 / 簡\n將這首歌也列進我的人生廣東歌是因為——它是我的分手歌。當然現在已經不再介懷，但時間倒回到2022年，是有那麼一個夜晚我一邊循環這首歌一邊哭了十幾張紙巾一邊決定是時候講一句再後會無期（並沒有，只是終於開始刻意減少聊天頻率直至戒斷了）。\n我不打算在這裡寫太多私人感情，尤其還是過去的感情，還是回到C ALLSTAR和這首歌本身吧，他們也有很多故事可講。C ALLSTAR最出名的歌是《天梯》，這首歌是C ALLSTAR 2017年休團前的最後一首新歌，也沿用了和《天梯》一樣的製作團隊，頗有一點要畫個圓滿句號的意思。\n它真的是一首很適合講再見的歌。歌名本身就提供了詮釋搖擺的空間：要不要再見？還是再也不見？聽者可以自己選擇答案。我覺得這首歌的核心就在副歌起始兩句的歌詞裡：說句再見 告別在 熟悉的 小街角 相識的老地方，說過再見 我但願 在他日 欣賞你 成熟更為好看。告別是為了成就更好的彼此。它當然是一首分手情歌，但也可以看作是將休團的樂團對粉絲的寄語，甚至我看到油管評論區裡有人說他辭職時都懷著不捨得的心態loop這首歌（怪可愛的= =）\n對於C ALLSTAR來講，他們在四年後再見了，也問心無愧地交出了成熟更為好看的新專輯，包括兩首五台冠軍歌——在大離散時代讓香港人深有共鳴的 《集合吧！地球保衛隊》和 《留下來的人》。對於我來說，我也move on了，也覺得當下的自己是最好的自己。我還是會常聽這首歌，不為回頭，是為了繼續向前看，縱使世界極大 而破繭了至能遠飛。\n點擊收看四個天線寶寶唱分手情歌👇\n《給十年後的我》 # 演唱：何韻詩 蘇永康 黃耀明 容祖兒 陳奕迅 薛凱琪 黃偉文\n原唱：薛凱琪\n作詞：黃偉文\n作曲：陳小霞\n一首時長只有2:43的短歌，一首全是由問句組成的人生之歌。十年又十年，人生就這麼多個十年，這十年來做過的事 能令你無悔驕傲嗎？ 那時候你所相信的事 沒有被動搖吧？面對每一個問句，你都能問心無愧地回答嗎？這首歌太適合作為一種定時回顧的儀式，在2012 Concert YY中也是作為最後一首歌收尾登場。\n應該沒有人會質疑這次合唱是這首歌最經典的版本，世事冷暖，這麼多年後回看更添了許多複雜的情感。我不想由我個人的角度去評判歌者是否在十年後還配得起他們的唱詞——其實關我屁事。能昂然回答當初堅持還在嗎 刀鋒不會 磨鈍了吧的人自然是最好的（我們小何當然是最好的！），但這首歌的意義本來就在於自省。\n2012 Concert YY曾經有個十年之約，這十年間物是人非，2022還是我們何韻詩在黃偉文生日時搞了一個“YY之夜”線上演出，最後以獨唱這首《給十年後的我》收尾（可惡，想喊，她好細膩）。她在唱完後說，「我覺得人生最快樂的，是你行每一步，都是好穩、好confirmed地，可以跟自己說，我知道自己在做什麼，而是無悔的。」 我希望這也會是我每一個十年的答案。\n","date":"22 January 2024","permalink":"/posts/my-fav-cantonese-songs_2/","section":"博客","summary":"快樂嗎 你還是記得你跟","title":"我的人生廣東歌（二）"},{"content":"","date":"22 January 2024","permalink":"/tags/%E9%A6%99%E6%B8%AF/","section":"標籤","summary":"","title":"香港"},{"content":"","date":"22 January 2024","permalink":"/tags/%E5%BB%A3%E6%9D%B1%E6%AD%8C/","section":"標籤","summary":"","title":"廣東歌"},{"content":"","date":"12 January 2024","permalink":"/tags/tim-hortons/","section":"標籤","summary":"","title":"Tim Hortons"},{"content":" 來加拿大了怎麼也要試試國民品牌Tims吧！ 我覺得Tims能遍地開花的主要原因只有一個：太！便！宜！了！我們Tims不到兩刀一杯中杯咖啡/茶，一點五刀一個donut，三毛一個timbit，打遍加拿大窮人心巴無敵手。好不好吃/喝且再另說，有這價格兜底覺得好吃是你的福氣，覺得難吃也虧不到哪裡去。\n但是初來乍到，或者就算來了很久，如果你和我一樣有點單困難症，很可能看著不斷閃爍的電子屏幕就發暈，要麼完全不知道點啥，要麼局限在非常單一的選擇裡，更別提customize自己想要的飲品和食物了。那麼恭喜你找到了這篇文章！\n我去年九月開始在學校的Tims打工，又做cashier又做counter assistant，三個多月下來也算是對菜單熟稔於心。雖然咱這家Tims提供的產品種類帶點限制，要cold brew沒有cold brew，要quencher沒有quencher，也沒有loaded wrap和bowl，但沒有的也基本就這些了！本文會先（完全憑主觀感覺）搞一個顧客流行指數和本人推薦指數，再根據Tims產品分類，以五顆星為滿分詳細嘮嘮我想嘮的單品和打工以來的觀察體驗，耶ヽ(･∀･)ﾉ\n頂鍋蓋： 如果試了覺得上當了別來罵我，要麼我倆口味天差地別，要麼給妳做的員工操作不規範或者東西擺太久了，可以直接要求重做一份或者換個別的的！ 顧客流行指數榜Top5 # 🥤： Double Double / French Vanilla / Iced Capp / Iced Coffee / Chai Tea\n🥪： Farmer\u0026rsquo;s Wrap / Crispy Chicken Wrap / Grilled Cheese Melt / BELT Bagel / Any bagel toasted with plain cream cheese\n（該榜單食物類別不考慮donut和timbit） （沒link的是我懶得寫了）\n牛油果推薦指數榜Top5 # 🥤： Steeped Tea / London Fog / Iced Capp / Iced Coffee / 2C1S Coffee\n🥪： Farmer\u0026rsquo;s Wrap / Crispy Chicken Wrap / Roast Beef Craveable / Chili Soup / Roast Beef \u0026amp; Cheddar Sandwich\n熱飲區 # Double Double # 評級: ⭐⭐⭐⭐\nDouble Double是Tims最具代表性的產品了吧，其實就是double cream double sugar original blend coffee，每日被提及率及消耗量極高。對於不喜甜的人來講這個搭配可能過甜，可以改成double cream one sugar或者任意量的cream不加糖。嗜甜的人就會直接點Triple Triple（點的人真不少），甚至Four by Four。後者真的很離譜因為cream和sugar加下去就占了整個杯子的一半容量⋯⋯也不知道是在喝咖啡還是喝糖水（扶額）。\n關於customization，糖可以換splenda，cream可以換milk/soy milk/oat milk/almond milk，咖啡也可以換decaf（低咖啡因）/ dark roast（深度烘焙）。\nSteeped Tea # 評級: ⭐⭐⭐⭐⭐\n比Double Double coffee多一顆星只是因為我更偏愛茶，給coffee的所有奶和糖的配置也可以應用到steeped tea上，結果就是——能喝（且便宜）的奶茶變多了（此處應有一個貓貓星星棒表情包）！去華人奶茶店買杯奶茶七刀起步，在Tims兩刀就有一款可基礎可百變的奶茶欸（雖然不能做冰的）。\nSteeped Tea是茶葉鮮煮的紅茶，你可以加2cream 1sugar變一杯純純正正的奶茶，3oat milk 1 sugar變燕麥奶茶。小紅書上分享的配方還包括加3soy milk 1 sugar 1 cream變豆乳奶茶，half steeped tea half french vanilla變香草奶茶。可定義性超高的！\nLondon Fog # 評級: ⭐⭐⭐⭐\n和倫敦沒有半毛錢關係的倫敦霧！據說是起源於溫哥華的飲品配方，做起來也不複雜，1 or 2 pump of vanilla syrup + Earl Grey tea bag + steamed milk, that\u0026rsquo;s it！試過之後又真的覺得蠻好喝，我通常加1pump syrup就覺得夠甜，再加少少量的熱水先釋放伯爵茶包的香氣，最後旋轉著倒入打泡完的熱牛奶，一杯倫敦霧就完成啦！很推薦從來沒有試過這款飲品的人嚐嚐鮮。\n一開始打的是五星，最近又試了一次不知道是因為失去了新鮮感還是怎麼的覺得不過如此= =扣一星意思一下叭。\nLatte/Cappuccino/Americano # 評級: ⭐⭐\n都是同一個機器做出來的就直接擺一起說啦，橫豎都是espresso+steamed milk/hot water。給兩星也不是因為不好喝，是覺得比較——普通/敷衍？我不知道校外的Tims是怎麼做的，我所在的這家就是按按咖啡機上的1shot/2shots button，再選擇下是給latte還是cappuccino的steam milk，加一起就完事了。如果是iced latte就更簡單了，省去了steam的步驟，milk + ice + espresso，done。我個人會覺得沒有什麼來Tims買的必要= =。\nChai Tea # 評級: ⭐TBD\n是店內很受歡迎的選擇，也是社交媒體上評價兩極分化的對象，分歧點在於它濃郁的肉桂及其它香料的香氣。不少印度人下單時喜歡點steeped tea + extra chai tea bag來增加風味，或者chai tea latte（和london fog做法差不多，區別只在於茶包的選擇）。我一直沒敢試所以先放個TBD這樣！\n其它Specialty Tea我嘗試的不多也很難點評，但能給的一點建議就是如果你比較在意手的清潔程度，少點茶包尤其是orange pekoe tea和green tea。因為其它茶包至少還是單獨包裝，這兩種茶是盒裝，不知道多少次被摸來摸去⋯⋯（補充：但後來在機場店看到的orange pekoe tea也是單獨包裝的，看來不同店不一樣，建議肉眼觀察下它茶包放哪了，放在櫃檯上的對外展示位通常是小盒包裝的，放得很靠近操作台的就可能是大包裝。）\nFrench Vanilla # 評級: ⭐⭐⭐\n從我自己的收銀體驗來看是不亞於double double的流行選擇。純喝的話我會覺得有點太甜了，三星與其說是給french vanilla的不如說是給它不同搭配的可能性，比如half french vanilla half coffee，half french vanilla half steeped tea，會起到比較奇妙的中和作用。怕甜的可以要求只加1/3或1/4的French vanilla，像是一種替代cream/sugar的調味角色⋯⋯喜歡甜的還可以嘗試half french vanilla half hot chocolate/white hot chocolate。\nHot Chocolate/White Hot Chocolate # 評級: ⭐⭐\n沒喝過，但覺得比較甜而且對巧克力味無感，所以非常武斷任性地給了兩星（。冬季還有candy cane flavour特飲，等於是再加幾泵糖漿和topping，我更受不了啦！有的人也會點half hot chocolate half coffee，就成了一杯摩卡。感興趣的可以試試。\n冷飲區 # Iced Capp # 評級: ⭐⭐⭐⭐⭐\n很高興地和大家介紹我們偉大的iced capp！如果要給它取個中文名我會取「粗獷版咖啡Tim冰樂」(對標星冰樂，但又不完全像)，說人話就是「卡布奇諾咖啡冰沙」。我第一次喝的時候沒覺出它的好，可能是因為那時店員做的那杯不行。開始打工後又喝了一遍就愛上了，連續點了好幾天。對我來說不是特別甜，又帶著點恰到好處的咖啡苦味，中和起來很迷人很上頭。\n做法是一杯底的cream加iced capp mixed base，可以要求extra/less cream or with milk/choc milk/oat milk。喜歡甜的人會加不同的syrup但我就不想試了，tims放syrup的標準是小杯加兩泵，中杯加三泵，大杯加四泵，想想就嚇人。original iced capp就已經很好啦！\nIced Coffee # 評級: ⭐⭐⭐⭐⭐\n我們冷飲區最受歡迎的兩大王牌除了iced capp就是iced coffee了。默認的iced coffee設定是cane sugar syrup + cream + refrigerated original blend coffee + ice。其中cane sugar syrup可以換成店裡有的其它各種syrup，比如vanilla/caramel/chocolate/halznut等等。和前面提到的一樣，小杯加兩泵，中杯加三泵，大杯加四泵，這個默認設置應該是比著加拿大人口味量身定做的，對我來說就有點too much。我最喜歡large vanilla iced coffee with 1 pump。每次看到亞洲面孔來點iced coffee我心裡都有一種衝動想問：會不會太甜啊？要不要減糖漿啊？真的很擔心有人第一次點覺得太甜就棄之如敝履，沒有發現我們iced coffee最好喝的一面( ≧Д≦)\nLemonade # 評級: ⭐⭐\n好像是我第一次去Tim Hortons點凍飲的選擇，印象裡就是無功無過，很正常但也說不上多好喝的一杯東西。做起來也很簡單，幾泵檸檬汁加natural base（我也不知道裡面是啥，看起來就是白色的冰沙）攪一攪就完事了。有iced capp和ice coffee在前我就不會考慮它。\nCreamy Chill # 評級: ⭐TBD\n和iced capp的區別只是所用base不同，它用的是和lemonade一樣的natural base，比iced capp base甜且無咖啡因。也因為更甜這一點我就不是很想試了。它的默認設置還會有whipped topping（鮮奶油霜），我也沒試過所以不予置評！\n烘焙區 # Bagels # 評級: ⭐⭐⭐⭐\nEverything bagel是所有bagel裡最受歡迎的，搜了一下它的seasoning組成是黑白芝麻、罌粟籽、洋蔥、大蒜、海鹽，就很香！其它像sesame seed bagel，plain bagel都一定不會踩雷啦。做簡餐的話通常選toasted/2x toasted with butter/plain cream cheese/herb\u0026amp;garlic cream cheese。2x toasted通常橫切面大部分都變深棕色了，更焦脆一點（如果店員操作不當也可能給妳來個全焦版= =）；+butter不要錢；+cream cheese加一刀，Tims用的都是Philadelphia的cream cheese，我覺得不管哪個口味都蠻好吃的！\nPastries # 評級: ⭐⭐⭐⭐⭐\n好喜歡好喜歡好喜歡Jalapeno or Herb \u0026amp; Garlic pastries，就是放在烘焙櫥窗裡那兩款其貌不揚的網格狀方塊。和其它烘焙產品比起來這兩款是難得的鹹口，jalapeno還帶點辣味。強烈建議放微波爐叮20s再吃，非常適合當個加餐。\nTwists # 評級: ⭐⭐⭐\n好像都是2023年出的新品，分別是four cheese twist和everything twist，前者顧名思義芝士味更濃一點，後者就是加了everything seasoning的——蔥油卷。我會更喜歡後者多一點，但無論哪一種都是加熱後食用風味更佳！\nMuffins # 評級: ⭐⭐⭐\nchocolate chip muffin是我收銀生涯裡最多人點的muffin，blueberry緊隨其後，fruit explosion次之，其它的存在感就相對不是很高。我個人覺得tims的muffin都還好，沒有齁甜齁甜的，但你當然也不能指望它多美味，對我來說就是個提供飽腹感的普通選擇，平時不會特別想吃。\nDonuts/Timbits # 評級: ⭐⭐\n有些人覺得tims的donuts/timbits是它最亮眼最標誌性的產品，我只能說這很難評⋯⋯它們通常都超級甜，所以我也很少試。在為數不多的嘗試中，sour cream glaze已經被我拉黑；canadian maple甜是真的甜，但不得不承認也怪好吃的，中間是流心的餡兒；apple fritter如果沒有最外面那層裹住的糖漿會更合我口味一點，裡面真的有蘋果粒；old fashion plain donut是其中不甜的一種，但嚼起來的口感讓我覺得我在受苦（。太乾癟無味了，不過可能和我冷藏過夜又加熱了也有關係= =\n我覺得很好笑的一個點是canadian maple和maple dip、boston cream和chocolate dip的區別只是一個中間沒洞一個有洞——怎麼這樣就能分出兩款產品來啊！你們加拿大人真的有夠懶的！\n我觀察到顧客對timbits的喜愛度是birthday cake\u0026gt;chocolate\u0026gt;honey dip\u0026gt;old fashion plain，但這個喜愛度排名受印度裔顧客影響很大，白種人一般會直接說assorted隨你裝。donuts的偏好就沒有那麼明顯，每一款都蠻受歡迎的。\n早午晚餐 # Farmer\u0026rsquo;s Wrap # 評級: ⭐⭐⭐⭐⭐\n早餐最受歡迎的一定是farmer\u0026rsquo;s wrap，卷裡面的所有東西就是chipotle sauce + cheddar cheese + egg + sausage/bacon + hash brown。打工過程中有次驚奇地發現在tims點farmer\u0026rsquo;s wrap no egg比no meat還便宜，比原價少1刀多。想不明白為什麼一個煎蛋有這樣的地位。\nfarmer\u0026rsquo;s wrap和普通breakfast wrap的唯一區別就在於前者有薯餅後者沒有，沒有薯餅的wrap超級薄，我也想不明白薯餅這麼好吃為什麼有人會不要薯餅（關我屁事）。\nfarmer‘s wrap的變種是farmer\u0026rsquo;s sandwich和farmer\u0026rsquo;s croissant，內部所有材料都一樣，只是把包起來的那層皮換成了biscuit或者crois。還有很多vege會把肉換成lettuce/tomato/crispy onion。我比較無語的是有些同事會給這樣的訂單哐哐加價（按一次add sth的按鈕就加多一份錢），有些同事會按原本farmer\u0026rsquo;s wrap的按鈕下單，comment備註把肉換成什麼什麼。兩邊都覺得自己非常對還會去指導其他人怎麼收銀，被兩邊都指導過的我：你們要不自己統一下標準先？（黑線）\nCrispy Chicken Wrap # 評級: ⭐⭐⭐⭐⭐\n早餐之神是farmer\u0026rsquo;s wrap，午晚餐之神就是crispy chicken wrap。基礎組成是mayo sauce + lettuce + two slices of tomatoes + two pieces of chicken strips。我把chicken bacon ranch wrap看成它的飽滿升級款，因為區別只有換成ranch sauce和加了三四片bacon，比較適合想稍微多吃點（就一點）的人。\n每次我和Sloth出門不知道吃啥，最後的結局都是街頭隨便找家Tims點這個wrap吃。總之是一個很保底很安全不出錯的選擇.\nCraveables # 評級: ⭐⭐⭐⭐⭐\n是我打工後發現的最愛之一！雖然名字取得很浮誇讓人聽了也不知道是什麼東西，但本質上就是加烤牛肉或者炸雞條的恰巴塔三明治。因為體積比較小所以價格更便宜，五刀一個，適合吃得不多或者想多個加餐的人。其中roast beef craveable是toast過的ciabatta bun裡夾了在烤架上烤得滋滋香的牛肉 + cheddar cheese + crispy onion + steak sauce，chicken crave able是同樣的bun + two pieces of chicken strips + lettuce + creamy bbq sauce。我更推薦前者，覺得前者的口感更豐富一點！也推薦把steak sauce換成bbq sauce，並且在點單時要求less sauce。有些staff擠sauce真的太過熱情了(｡ŏ_ŏ)\n在reddit看到有人對tims的craveable做出如下評價，忍不住發出今天第一聲爆笑。Craveables真的配得上自己的名字那樣棒！ Grilled Cheese # 評級: ⭐⭐⭐\n意外地見到很多人喜歡點這個，所以也拿出來聊一聊。基礎款是兩片artisan sliced bread夾四片cheddar cheese，表面再鋪滿馬蘇里拉芝士碎，在烤架上烤個一分半左右就好了。聽起來是平平無奇的熱量炸彈，但一些人點的定製升級款也讓我很感興趣：原來的基礎上再夾hashbrown / cripsy onion / lettuce / tomato，再澆點chipotle sauce。聽起來就很滿足了，他們怎麼這麼會點！\nSoup/Chili # 評級: ⭐⭐⭐⭐⭐\n是暖暖的湯！一共有chicken noodle soup和chili兩種，前者會把chicken strip切小塊丟進去，是雞粉味還蠻重的雞湯（。我更喜歡我們chili with bun，看上去很紅但是一點都不辣，湯裡面有很多肉末豆子磨菇，配bun蘸著吃一碗下去也飽了。喜歡！\n本來還想再接著寫寫自己的打工回憶和體驗的，但感覺性質就和這篇圍繞菜單的分享和點評非常不一樣了，而且這篇又那麼長，索性——下次再寫吧！（溜之大吉） （又跑回來）歡迎留言告訴我你在tims最喜歡吃/喝什麼（如果有）！\n","date":"12 January 2024","permalink":"/posts/tim-hortons-menu/","section":"博客","summary":"來加拿大了怎麼也要試","title":"Tim Hortons菜單不完全點評"},{"content":" 我的Flag必不會倒！ 之前新年也會斷斷續續地寫對這一年的期望和目標，因為只是寫給自己看，通常非常求其地記在個人備忘錄裡，總是寫完就算，過不了幾個月就拋之腦後，更別提年終時再去回顧上一年的目標是否達成了。新年第一天閒逛了一些友鄰的博客，看了不少2024 flag相關的文章，也有點心癢癢，遂跟之！\n有了博客平台，至少曾經寫下的東西會更容易追溯，心裡也會有個聲音說「這東西可是這一年到頭時要review的，請別太丟臉了」，想來會更有望堅持完成吧！\n學業/職業 # GPA：保持4.0到畢業吧，在加拿大college是個不難達到的目標。 技能：系統性地深入學習git和github，目前的了解還停留在非常表層的階段；根據 Javascript Info來比較全面地複習鞏固JS，再找資源繼續學習React。 實踐：至少做三至五個課業外有質量的side projects，豐富portfolio和cv。 搵工：認真對待每個job search的窗口期，想儘早secure第二份coop job和第一份graduate job。 健康 # 作息：雖然目前還在艱難調時差，希望恢復過來後大部分日子可以維持11:30pm-12:00am睡覺，7:30am-8:00am起床的作息。 護眼：去年眼乾流淚的症狀有變嚴重的趨勢，要更注重眼部護理，畢竟指著電腦吃飯呢。除了用眼藥水之外，培養定時放鬆眼睛、熱敷/濕敷眼睛的daily routine。 鍛煉：如今崴著腳不知何時能恢復鍛煉⋯⋯Anyway，今年一定要開始制定更有針對性更有規律的健身目標，一週（至少）三練，優先級是先把腹部和手臂線條練出來！ 飲食：想要保持每天都有水果攝入，哪怕是冷凍水果/100%果汁呢！其它飯食方面沒什麼特別要改進的，可能儘量選取蛋白質含量更高的肉類食材吧。 理財 # 記帳：嘗試象友白石京推薦的 YNAB記帳軟件。它的邏輯是「每一筆預算前提都來自你已經真正擁有的錢，更直觀地掌握自己的經濟能力以切實影響消費行為」。目前已經註冊帳號完成基礎setup，試用體驗還不錯，期待客服再給我認證學生身份加贈一年試用期，那就更有動力熟悉這個高門檻軟件了。 開源：在保障 學業/職業目標能達成的條件下，繼續兼職打工吧。除了多一份加幣收入很香之外，我自己也很享受打工過程中那種暫時脫離原本的生活軌道，駛入另一片人生側面的體驗感。 收支平衡：我對這一年的期待是用所有加幣收入cover所有加幣支出（九千刀一學期的學費不算⋯⋯），原本淨資產的變化幅度不會很大。很明顯本金融小白也不考慮任何通脹通縮的外在因素和投資收益= =這些以後再補課吧！ 文化娛樂 # 讀書：不敢定太高的目標，先從每個月一本起步吧，已經荒廢讀書習慣很久了。 電影：Same as above。不過今年有了投影儀，應該會更享受家裡觀影的儀式感。 音樂：覺得現在的歌單有點閉塞，都是過去十年積累的廣東歌循環播放，Spotify的隨機推薦也很同質化。要下點功夫開拓下音樂品味才好，開一個新的playlist尋找新歡吧！ 遊戲：曠野之息我再玩一年都不會膩⋯⋯但也有已經買了的星之卡比和怪物獵人需要關照一下！（這算什麼新年目標啊喂） 生活習慣 # 手機屏幕時間：控制每週平均手機屏幕使用時間在2小時以內。更多的使用時間通常是無意識地刷社交軟件，被大數據算法不斷餵食本身無計劃攝入的內容引起的，想要盡可能避免在這一點上浪費時間。 家務：清潔是不能犯懶的，拖著拖著只會越來越難清潔。要更加嚴格地以每兩週一次的頻率清潔檯面和地面，尤其是臥房和浴室。 Blog：建站時立下的flag是bi-weekly一篇，就算沒那麼準時也請保持平均每月兩篇的節奏吧！ 目前能想到的就這些，覺得可實踐性還是很強的。結尾附一張在東京淺草寺求來的吉籤吧，解籤語中說「洗出舊根基」，意為「Washing up those bad which stuck to the old root to refresh its life」，蠻適合這新年新氣象的兆頭。雖然我本來已經很好了，新的一年我也會成為更好的自己呢！ ","date":"2 January 2024","permalink":"/posts/2024-new-year-resolutions/","section":"博客","summary":"我的Flag必不會倒","title":"2024 New Year‘s Resolutions"},{"content":"","date":"2 January 2024","permalink":"/tags/%E6%96%B0%E5%B9%B4/","section":"標籤","summary":"","title":"新年"},{"content":" 新年快樂！ 十二月太忙啦！又final又提車又回國又旅行，日程塞得滿滿當當，看了下每個星期的平均手機屏幕使用時間都在2到3小時左右，和之前比也是低了不少。但心裡也有條底線是——再忙也至少要寫一篇blog吧！還是在年終這個節點！所以幾乎是踩著ddl趕出來這篇回顧。\n本月Milestones # 考到G牌拎到車 # 謝天謝地跳考G牌一次過啦！本來以為回國前預約不到考位了，每天抱著僥倖心態上網站刷刷還真刷出來一個十二月初的合適時間。考前又突擊練習了2.5堂課，特別是臨考前的一小時和教練重新走了幾遍路線，感覺對溫習考試注意點和鎮定心態非常有用。整體學車上了六節課吧，加上考試租教練用車花費大約490刀，算是一筆較合理的費用支出。\n車是兩個月前就訂下的，也在十二月初完成了交接。買的是一輛有點年頭但各方面性能都還不錯的手動檔斯巴魯，雜七雜八的費用加起來在五千刀左右。比市場價便宜許多，因為是健身房相識的姐姐想賣車剛好被我撞上了，有些友情價的意思。\n接下來的計劃是潛心修習手動檔開車技巧，特別是低速行駛和停車再啟動時對離合和檔位的掌控要再精進一下！否則neighborhood遍地的stop sign太容易熄火了嗚嗚。 （回家路上lyft司機開的也是一輛手動檔，開得好順滑，搞得我聚精會神觀察了一路他的操作手法）\n時隔一年回家嚕 # 考完final就踏上了回國的航班。我不是一個特別思鄉思家的人，這次決定回家一方面是有些生活瑣事想儘快處理，另一方面也是知道下次回家遙遙無期。我想留在加拿大的決定對家人來說依然是個秘密，和他們對我的未來期許完全相反。我無法預計攤牌後的爭執激烈程度，索性決定下次至少得拿到pr才考慮回國。這次回家更像是一種緩衝期的作用。\n我的一個矛盾點是我離家遠走的渴求那樣大，但我不是不愛家人，我從家人那兒得到的愛也不可謂不多。我爸會給我一邊發微信紅包一邊說老爸想你啦，媽媽更是隔三岔五就和我視頻通話。我還有兩個很可愛的小姪女，我去接她們放學時她們會飛奔過來環抱住我，在家吃飯時她們會強烈要求我坐在她們中間，和她們在一起時我會偷得一些無需為人母卻被依戀的幸福感。但這種幸福感不可能持久，一個星期已經很足夠。與闔家團圓相比，我非得擁有個人空間的自由以獲取自我滿足不可。距離，長距離，是最直接的解法，卻是我單方面的解法。我要如何滿足家人的情感需求呢？我好像只能讓他們逐漸習慣於我的缺席，在他處另覓滿足。\n這次回家還把對象帶回去住了七天，其實只是為了方便安排行程之後一起旅遊。但是從老中家庭的角度出發就是：啊你要和這個人結婚了吧。我覺得不能慣著這種約定俗成，我想一起回家就一起回家，它可以完全不代表什麼，這個婚誰愛結誰結。親密關係有那麼多種形式，我（目前還）不願意走人們最習慣的那一種。\n東京七日遊 # 第一次去日本玩！最深刻的印象是廁所都好乾淨好舒服，智能馬桶是每個公共廁所的標配。很好笑的一點是日本公廁的智能馬桶會自動播放流水聲以掩蓋如廁發出的聲音⋯⋯這很日本人，也很自欺欺人。我就建議人不要給自己施加這麼多來自外部眼光的壓力自尋尷尬。\n我們行程規劃得很隨意，想吃的店因為沒預約或者要排隊一家都沒吃上哈哈哈，但隨機walkin的店也都沒踩雷。最快樂的是在河口湖住了一泊二食且帶私人風呂的富士湖酒店，打開溫泉前的窗戶就是富士山景，咔咔拍照都拍不出一張相可以傳遞眼見的震攝感。 最衰的是最後一天原本要去橫濱的UNIQLO PARK大逛特逛，結果左看右看太高興臨進門前崴了腳。（我怎麼每個月都在受傷ΩДΩ）於是只能在海港前的凳子上擱著腳遠程遙控Sloth我要哪對襪子哪條秋褲哪條內褲= =\n本月碎碎念 # 登陸一週年 # 已經在加拿大過了一整年了啊。這一年我生活得很滿足：\n與想像中的挑戰難度相比，轉碼學習給我帶來的成就感更多，還算游刃有餘； 課業壓力不大，我還在coop job search term的第一輪早早鎖定了理想的position，新的一年又會開啟專業實習的新嘗試； 第一次做兼職，早班要求讓我硬生生拗正了作息習慣，精神狀態也隨之變得更好； 在開學的第一天認識了Sloth，很高興一路可以一起走過，有這樣一個人接納我所有好的壞的情緒，吹了我快一年的頭髮，共尋共享日子裡的微末趣味； 很喜歡渥太華的生活節奏，又慢又靜，它沒有那麼繁華，卻正對我的胃口。未來會考慮繼續在這座城市生活下去的！ 簡單的新年願望 # 學更多嘢：轉碼後「學無止境」的感受是最強烈的。這個領域有那麼多新東西可以學，我像是剛出新手村四處撿新武器開新地圖的林克，對這片大陸充滿新鮮感和探索慾。2024我會有兩個work term，會畢業，會掌握更多更深的專業技能，最好能簽下畢業後第一份正職工作的約。 寫更多blog：寫blog和看blog都讓我感到幸福。請堅持探索並表達更豐富的生活和精神世界吧！ 做更多gym：今年算是剛剛入門，希望在新的一年加強鍛煉的頻率和強度，早日練出大肌肌💪。 愛更多人：可能因為時差距離、新的親密關係、現實生活的繁忙度，種種原因都讓我和以往在意的人和事的聯繫不可避免地減少了。不管是維護舊感情還是建立新關係，新的一年我想要更有意識地去表達愛和關心，去付出時間和精力，更少沉浸在個人的小世界。 博客更新 # 什麼都沒更新應該是可以skip這part的吧（喂。總之會把十一月立下的flag一一寫完先，一個無人在意的好消息是Sloth拖著拖著終於也快拖出一篇文來了，敬請（不必）期待。\n一瘸一拐著回到加拿大的家了，舟車勞頓之後更想念之前有規律有生產力的生活。希望腳踝可以快快恢復重新活蹦亂跳起來！也在此祝大家新年好好走路，踩穩每一步！\n","date":"31 December 2023","permalink":"/posts/dec-2023-recap/","section":"博客","summary":"新年快樂！ 十二月太忙","title":"寫在最後一天匆匆忙忙的十二月小結"},{"content":" 一開始覺得好不容易但是越寫越開心了！ 打開一個空文檔然後愣住，我到底要寫些什麼？流水一樣活過去的日子像天上的星星明明暗暗，想重新一顆顆抓回來看個真切也難。時間的概念也模糊，想不起一些事到底是發生在十月還是在十一月，但——這又有什麼重要的呢。看了些友鄰的每月小結博客，最後決定仿照 第三夏爾（我最喜歡看的每月小結！）的結構去梳理自己這個月做了什麼，有哪些值得分享的大事小事。我寫得還算認真，你且先將就看著：\n本月Milestones # 練車迎來曙光 # 因為終於預約了下月初的G牌考試！只有一次跳考機會，所以我慎之又慎，希望能夠一鼓作氣考過！（畢竟車已經買了，考不過只能拿著G1在家裡養著車也太慘了。）雖然我擁有看起來5年駕齡的國內駕照，但實際上路經驗一雙手都數得過來。十月初開始每個星期斷斷續續練2小時車也練了有五六次了，從第一堂課還要學steering control到如今終於對考試有點信心啦！\n目前覺得上下高速都不難，最有挑戰性的部分是開出Drive Test Center轉彎併入車流時，對左右來車的距離判斷和駛入中央分隔帶或對面車道的起始速度把控（教練說我總是錯過機會或者太慢了🥹）。Anyway這星期會再針對這個弱點多加練習！然後下星期考試！老天保佑！\nBtw我找的是本地教練，收費可以說是全網最低，70刀兩小時，和其他教練60刀一小時的均價相比感天動地。人在Ottawa又有練車需要的網友可以戳我推薦（無利益相關）。\n黑五買買買 # 一早聽說Shoppers有黑五250刀積分換400刀的膨脹活動，這一年下來靠Loblaws的週二學生積分日和Shoppers常有出沒的二十倍積分offer，竟和對象一起攢出了750刀積分——然後在黑五換成1200刀全redeem了。因為是第一年在加拿大，確實有很多東西想添置，這次一口氣買了耳機鍵盤投影儀還有dyson吹風機和switch，生活質量大提升！\n很同意象友這條關於北美售後服務體驗的 嘟串。我之前買東西都沒有去官網登記的習慣，這兩天在dyson官網登記了產品序列號，看到黑五有complimentary gift的offer，雖然說“only at Dyson”，但打了個客服電話也爽快一起送了$170的梳子和收納盒。還在philips登記了新買的電動牙刷，發現原來買後30天內登記可以多一年的warranty，三年內壞了都可以聯繫保修或者直接以舊換新。穩穩的很安心σ(≧ε≦ｏ)\n其他買的七七八八的也不贅述了，如果有特別好用或者難用的再專門分享/吐槽吧！目前最滿意的購入還有Winners淘到的20刀14inch義大利鐵鍋，但鍋這種東西日久見真章，用個半年再看看。\n煎牛排新晉高手 # ——我自封的。這個月煎牛排也越來越熟練了呢！參考了 小高姐和一個 台灣YouTuber的教程，前者只需要開火一次且順帶了醬汁，後者會在第一次大火煎完醒肉後再回鍋小火煎，我自己覺得都挺方便的。而且去Loblaws採購會經常看到真空包裝的冷藏牛排，少了一個解凍的過程也很舒心。 本月碎碎念 # 健身掙扎期 # 學業、打工、博客⋯這個月的瑣碎事堆下來總覺得不夠時間再分給健身。也有一部分原因是天氣凍下來懶得穿穿脫脫( ≧Д≦)。昔日室友 老全建了個運動打卡群，結果我和她兩個人在群裡連著十幾天以靜制動，敵不動我不動，展現了驚人的耐心品質。可惜這個平衡戰局剛剛被打破了，所以我也要振作起來重回健身routine，萬不能輸給老全！\n燙傷護理 # 一周前打工時不小心觸碰到了grilling machine的邊緣被燙傷，小臂上留了道5cm長的疤痕。當時正值午餐高峰期，我還記掛著等餐的顧客沒第一時間去沖冷水。事後想來真是，有些責任感大可不必一力承擔的）第一時間請同事幫忙接手才是比較好的處理方式。\n燙傷後必須儘快用冷水沖洗足夠長的時間才能有效消減疼痛，網上搜到的時間建議一般是15至30分鐘。我可能就沖了一兩分鐘吧⋯⋯我還犯了個錯就是直接用冰塊冷敷傷口，但這個做法反而會加劇對傷口的刺激。還好燙傷的程度也不算太嚴重，是我能忍到的疼痛程度。現在在Shoppers買了盒Mederma的scar cream每晚塗抹一次，不知道最後效果如何。打字的時候傷口已經到了最癢的結痂階段，我在此嚴正告誡我自己：管好你的手！別摳！\n雪天二三事 # 十一月的雪下得越來越頻繁，加拿大也轉了冬令時，冬天真的來啦！好喜歡視察下雪後行人道上留下的狗爪印子awww一朵一朵小梅花： Sloth喜歡踢球，昨天回家時從巴士站踢回來一團凝固的雪球。過了兩個小時我們出門去超市，走出去兩分鐘他又跑回家門口，我以為他忘帶啥了結果他說忘了踢這塊雪球出來 ლ(⁰⊖⁰ლ)，然後就一路踢去超市。比空氣籃球更過分/過癮的莫過於非空氣足球！ 哥哥說天氣冷了讓我買件好點的羽絨服他報銷(≧∇≦)/。覺得加拿大鵝太厚重還是買了Aritzia Super Puff給老哥省錢嘿嘿。說是也能扛零下二十度，再過一個月看看是不是誠不欺我。 博客更新 # 已發布 # 寫了三篇！不算太懶！\nA Beginner-Friendly Tutorial for Building a Blog with Hugo, the Blowfish Theme, and GitHub Pages：因為我自己在建站的過程中搜了無數教程，一度雲裡霧裡畏手畏腳，現在熬出頭了希望能為人撐傘！對於有足夠coding知識的人來講這篇文章可能顯得很贅述，但我就是以零門檻視角出發寫的步驟。我有不少現實中的朋友擁有敏銳的生活感知力，我也很喜歡她們的文字，如果能把至少其中一個拽進博客宇宙我也心滿意足了～在漫漫互聯網裡能幫到其他人就更好啦。 How to Install a Specific Version of Hugo on macOS：這篇完全是搭建博客教程的衍生篇，因為我確實遇到了最新版本的hugo和theme版本不兼容的問題，就順勢搜了解法寫了這篇。它其實是在電腦上裝了兩個版本的hugo，需要哪個就調哪個路徑上的版本來用。 我的人生廣東歌（一）：極私人的音樂和人生旅程分享。就像在文裡說的，它們是「塑造了我之所以成為我的」廣東歌，在我心裡喚起的共鳴和對我的影響是無可取代。歡迎你來聽。 小預告 # 《Tims打工記 附菜單不完全點評》：已經在學校Tims打工三個月了！不知道有沒有人和我一樣有點單困難症，看著不斷閃動的電子屏已經很焦躁了更別提定制化點單了。我現在算是把Tims大部分菜單吃透了，也有了比較明確的口味偏好，可以整理整理心得供大家參考。 《我的人生廣東歌（二）》：歌是已經選定的，要掏心掏肺地寫是要拖延的。照目前的日程安排不知道年底前能不能寫出來hahaha，放在預告裡也算是表露下我不鴿的決心吧！ 書影音遊 # 很慚愧，沒怎麼看書，只是在上下學的巴士上斷斷續續地看會兒《綠山牆的安妮》。我小時候沒看過這本書，現在長大了再看，更能體會到安妮的稀有和珍貴——好恣意好天然，放任情感和想像力流動的生命。 這個月的下飯劇是《甄嬛傳》和《麻醉風暴》，現在在看《一把青》和《Our Planet2》。原來這是我第一次完整看完甄嬛傳！之前總是還沒看到甘露寺就因為種種原因擱置了。2023年才看完的一個感受就是甄嬛傳台詞真的養了我們很多年的互聯網文化 (屮゜Д゜)屮 開玩Switch！目前在玩塞爾達、小小夢魘2、PICO PARK和海綿寶寶攤煎餅（。PICO PARK是之前看3080車隊聯機種草的，應該人越多越好玩，歡迎找我和Sloth聯機！ ","date":"30 November 2023","permalink":"/posts/nov-2023-recap/","section":"博客","summary":"一開始覺得好不容易但","title":"當一個忘性很大的人嘗試寫十一月小結"},{"content":" 「感謝永遠有歌 把心境道破」 我聽廣東歌的時間不算短也不算長，上大學之前聽得多的只有陳奕迅（。在香港呆久了才慢慢領略到更多廣東歌的妙處，到如今歌單已經是廣東歌的天下了。\n好聽的歌在我心裡分作這麼幾種：\n是個人都會覺得好聽的（說不好聽的會被我開除人籍） 能放進歌單裡無限循環的 有與我直擊心扉的剎那的 塑造了我之所以成為我的 珍稀程度逐層遞減，最後一種是最難得也最私人的。我挑出了七首作為我的人生廣東歌，沒有高低先後排序，它們的共同點是都在我人生的不同階段留下磨不滅的印記，或陪我走過低谷，或教我挺直脊骨。我感激這些歌的出現，也想盡力描述下它們之於我的好處。\n一些說在前面的話：看到你厭憎的歌手請隨便翻白眼。我的態度是人與作品分離，愛屋或許及烏，恨人卻不至於恨歌。一首歌不是獨屬於歌手一個人的產物，我只「感謝永遠有歌 把心境道破」。 《苦瓜》 # 演唱：陳奕迅\n作詞：黃偉文\n作曲/編曲：Kenix Cheang@Private Zoo\n監製：舒文@Zoo Music\n說來也好笑，《苦瓜》唱的是半生的感悟，我卻在十六七歲的時候就故作老成地沉浸在這首歌的意境裡。家裡本從不做苦瓜的菜，我還特地要求買來嚐味，堅持了幾個月後來再也沒主動吃過了（。\n這首歌的主旨簡單，無非是先苦後甜的人生大道理，但好就好在意象的選擇和歌詞的韻味。苦瓜又稱半生瓜，據說有兩種解釋。一是平時食用的苦瓜本身是尚未成熟的狀態，是為半生，這個生長階段的苦瓜甘苦清脆，比完全成熟發軟的甜味苦瓜更有口感；二是人年輕時往往不懂欣賞苦瓜的味道，活到半生，歷經百態，才嚐得出苦瓜的餘味，真正認同並喜愛苦瓜。\n對我來說，《苦瓜》出現得恰到好處。早一點或晚一點，離了那段時間恐怕也不會有反覆縈繞我心的共鳴。我的中學時期好像過山車般的循環，每次都是第一年滑到低谷，後兩年再慢慢慢慢爬上高處。也不是蓄意如此，只是入學第一年總是拍拖、貪玩、怠惰、叛逆，不願做標準意義的好學生，成為全班倒數也是家常便飯。高一下半年我被勸休學，無關心理身體健康狀態，我到現在都覺得只是因為那個班主任嫌我拖了實驗班aka好學生班的後腿。與做學校差生相比，休學後待在家裡的時間更讓人抑鬱，除去無聊、寂寞不說，我更容易聽得到來自家人的失望和旁人的奚落，自己情緒崩潰的次數也就更頻繁。\n我決定給自己掙一口氣。於是開始邊聽著「開始時捱一些苦 栽種絕處的花」邊埋頭苦學，結果也是「幸得艱辛的引路甜蜜不致太寡」，春風得意馬蹄疾。\n這首歌像是我在逆境時期的精神支柱，要說雞湯也有些雞湯，但我和黃偉文絕不是要弘揚吃苦文化哈。《苦瓜》的角度更多是苦盡甘來之後，莞爾一笑，已與往日和解的灑脫開懷。「珍惜淡定的心境 苦過後更加清 萬般過去亦無味但有領會留下」現在回頭看去，所謂的正道歧途，高山低谷，我不後悔我走過的任何一段路。該玩的我已玩過了，該學的我已學過了，捱過的苦不覺得太差，花心的甜蜜也不致太寡。我慶幸我是這樣長大的。\n《美麗新香港》 # 演唱：何韻詩\n原唱：My Little Airport\n作詞：林阿P\n作曲/編曲：林阿P\n何版編曲：何秉舜\n如果說《苦瓜》多多少少激我奮進，《美麗新香港》就讓我悵然若失了。我領著全獎歡歡喜喜去了香港唸書，卻不知最後見證的是如此一個美麗新香港。就像歌詞裡所唱的那樣，「命運要令我學識奮鬥 但我只懂得荒謬」。在全面崩塌的文明面前，世俗意義上的個體成就實在是微不足道。\n小飛機場原版的《美麗新香港》帶著種諷刺的輕快旋律，我更常聽的是何韻詩十八種香港 Reimagine HK 2015演唱會版本，何丙改編的旋律下更顯直白深重的鄉愁。懷念的不是別的，正是那個被摧毀被遺棄的香港面貌。\n「這香港已不是我的地頭 就當我在外地飄流」，九年前的詞作放在當下也是如此應景，選擇漂流外地的人也越來越多。就是帶著對香港的企盼前來的非港人，屁股還沒坐熱也急匆匆地趕著要走了。並非不留戀香港，只是失去了我們想要的香港。「我知已走到盡頭 為何還要擔憂 這世界也不是我的地頭 就當我在宇宙飄流」。心裡牽繫的地方，境況再差也捨不下那分在意。離散在外，對香港的情感和認同又能在世界的哪個角落復刻呢？不怕被笑，就算我只在香港暫居了四年，我心中對這個城市的歸屬感也是其它任何一個城市都不能比擬的。家鄉城市閒適安逸，卻不及香港鮮活有心氣。只是這個璀璨都市光輝到此，和許許多多人一樣，我們都成了在宇宙漂流的異鄉人。\n這首演唱會版本的《美麗新香港》的特別之處是，它以《東方之珠》為前奏，《鐵塔凌雲》為間奏，最後以英國國歌《God Save The Queen》到中國國歌《義勇軍進行曲》的承接作為收尾。\n我嘴笨，很難形容這種排布帶出的感慨，只能略作背景介紹供大家感受：《東方之珠》是創作於九七回歸背景的歌曲，唱東方之珠的滄桑，唱東方之珠的璀璨，更唱對這座城的深重情意和祝福。發行於1972年的《鐵塔凌雲》是飽含香港情懷的時代曲，意旨為「走遍世界各地，還是覺得香港最適合自己」（來源： 《就此模樣／鐵塔凌雲》五十年）。這首歌被視作現代流行廣東歌的開端，在《鐵塔凌雲》之前，香港樂壇的主流是粵劇、國語歌、英文歌；在《鐵塔凌雲》之後，廣東歌的發展才進入一個新時代，隨著廣東歌地位提升的還有越來越強的港人主體意識。兩首國歌自不必說，九七交接，時代謝幕又開幕，我們身在其中共浮沉。\n關於更多香港歷史的了解，在此推薦一本 《香港簡史》，作者高馬可，譯者林立偉。我購於太子留下書舍，也希望有能力的大家多多支持本地獨立書店。\n《滿地可》 # 演唱：何韻詩\n作詞：黃偉文\n作曲：周國賢\n編曲：英師傅\n監製：青山大樂隊 hocc@goomusic\n滿地可是廣東話中Montreal的城市譯名，也是我們小何長大的城市。在說這首歌於我的意義之前，談這首歌就避不開小何的人生軌跡。相信黃偉文為她填詞時就是比著她的人生之歌來寫的。\n她在香港出生，1988年隨家人移居來到這個法語區城市生活，又在1996年回到香港，參加歌唱比賽、奪冠、出道、沒有一炮而紅。初次簽約的唱片公司財務不佳，她出道五年才得以發行第一張個人EP（也是質量很高的一張EP！重聽各種版本《光榮之家》和《千千萬萬個我》的我總是流淚貓貓臉）。她的事業由此起步，此後連續七年成績斐然，每年都有至少一首三台冠軍歌，更在2006年獲得「叱吒樂壇女歌手金獎」（雖然獎座已經被她當垃圾丟了）、2010年入圍台灣金曲獎最佳國語女歌手獎最後五強。在她之前，也只有葉蒨文丶林憶蓮丶王菲及莫文蔚曾以香港歌手身份入圍金曲獎該獎項。\n「很多人對何韻詩的印象已經是停留在2014年後她頻繁為社會事務發聲的時刻。感覺上好像繁星下落凡間，久而久之大家都覺得她平凡不過。很多人忘記了何韻詩曾經是一個怎樣顯赫的歌手。」 ——張崑陽\n回到2008年，《滿地可》發行時正值她的事業高峰。在這樣的背景下回首來處，少時學著吉他「空想的冠軍歌」已不再是夢，「就算跌跌碰碰 活了這些年」，她也能夠昂然回答 「曾經愛過的 都有追 蠻力尚未有累」。這首歌是有這樣的妙處，不同的時期唱著聽著便是全然不同的感受。活過的經歷越來越多，她的自我也愈見鮮明豐富。曾經愛過的不只是純粹的音樂夢，對弱勢群體的支持、對同志身分的驕傲、對民主自由的追求⋯都漸漸成為了其中堅固的一部分。她可以為之驕傲的也不僅僅是她的音樂成就，而是她更完全的個體自我。但這個過程又談何容易，要重新唱出「曾經愛過的 都有追 蠻力尚未有累」的代價是越來越大的。她卻做得到。無論何時何地何境遇，她踐行的就是一條宗旨：「仍不愧面對 出發時熱血之驅」。\n我怎麼能不愛上這樣的人！我怎麼能不被吸引著模仿她的心氣風骨靈魂。聽《滿地可》，我一見鍾情的Live版本是2013 Memento演唱會。用手機錄了存在本地視頻裡，離家飛加拿大的那趟航班上，我就手動反覆循環這段視頻。只聽是不夠的，我愛極了唱到最後一段副歌（YouTube視頻版本7:40）時她的一舒眉一頓首，那樣坦蕩張揚的堅毅神情。我想著我是怎樣走來，又要往哪裡行去，我知道我是如何私自做了人生最重大決定，我想象我將如何一力闖蕩屬於我定義的生活，我許願我留下的也是她那樣的神情。問心無愧，邁步無悔，心志無改。\n寫了這三首發現篇幅就已經好長了，遂切割之。未完待續，不必期待！\n","date":"20 November 2023","permalink":"/posts/my-fav-cantonese-songs_1/","section":"博客","summary":"「感謝永遠有歌 把心境","title":"我的人生廣東歌（一）"},{"content":" Everyone deserves to own a blog. I\u0026rsquo;m here to help. 中文版特供前言:\n此文獻給所有想建博客卻苦於難以入門的朋友。\n作為也才轉碼十個月的新手，我深知那種熟悉一個新的工具、配置一個新的環境的迷茫和挫敗感。特別是對於零coding基礎的人而言，建站這個概念可能一開始就已經讓他們望而生畏。這篇文章的閱讀時間是14分鐘，如果一步一步跟做，預估時間會在1-3小時左右，取決於configuration部分定制化的複雜程度和是否衍生閱讀。如果你花的時間更長一點也不要緊，畢竟我從頭嘗試建站+寫這篇教程用了足足將近三個星期的時間。如果你在某一步卡殼無法繼續，歡迎留言提問或者直接聯繫我。\n我的方案可能不是最優最普遍的做法。相比網上搜索到的其他教程，我只用了一個GitHub repository而非兩個。GitHub Actions的自動部署也還沒搞明白，歡迎路過的大神指教😭。但我可以確保的是我將所有步驟和注意點寫得足夠詳細，並成功試驗了一遍教程所示的建站和更新流程，順便再擺個 demo版的repository供大家回頭參考。\n我希望通過這篇小白級教程最小化免費建站的門檻，誘騙？ 邀請更多朋友加入我們復興博客宇宙的宏圖大業！\nThere are numerous ways to build a blog. You can choose popular platforms like WordPress, Medium, or Notion for simplicity, or craft static web pages using frameworks like Hugo and Hexo if you\u0026rsquo;re comfortable with a touch of coding. My personal preference leans toward the latter because it offers greater customization, cost-effectiveness, and stability. If you\u0026rsquo;re curious about selecting the right blogging tool for you, you can also check out this Chinese blog written by Douchi for valuable insights.\nThis article is written for people who are interested in creating a blog on their own but have minimal coding experience. It focuses on using Hugo and GitHub as the main tools for creating a blog. Hugo offers hundreds of themes with diverse styles and functions that you can explore to suit your personal needs. I would recommend the Blowfish theme, which is one of the most advanced and flexible themes in Hugo with attractive layout and detailed documentation. If you prefer to use a different theme, simply refer to the documentation of your chosen theme when it comes to theme-specific steps.\nPrerequisites # No prior background knowledge is needed. I will try to explain everything in the procedures and feel free to leave a comment if you have any questions during the setup.\nHowever, to ensure a smooth follow-along experience, please complete the following steps before getting started:\nSign up for a GitHub Account and generate a personal access token following this tutorial Copy the token and store it somewhere else, because you won\u0026rsquo;t be able to see it again on GitHub. Download a code editor if you don\u0026rsquo;t have one Visual Studio Code, recommended for individuals with long-term coding needs Sublime Text, recommended for beginners Install Git on your system You can check whether Git is already installed by running git --version in the terminal If you\u0026rsquo;re a Mac user, please install homebrew first, which will make your life much easier For coding newbies, the installation steps are essentially copying and pasting commands into the terminal. You can find the macOS Terminal in the Utilities folder within the Applications folder, or simply search for it using Spotlight; Windows user please use PowerShell.\nThat\u0026rsquo;s it! You\u0026rsquo;re ready to start now.\nProcedures # 1. Install Hugo # for MacOS\nRun this command in the terminal. This will install the extended edition of Hugo. brew install hugo Enter this command in the terminal to verify whether Hugo is installed successfully. hugo version for Windows\nRefer to Hugo Installation Instructions or this tutorial on Windows 10 2. Create a Hugo Site # For Windows users, please only use PowerShell for the following commands as required by Hugo. Do not use the Command Prompt or Windows PowerShell. PowerShell and Windows PowerShell are different applications. Run the cd command to navigate to the folder where you\u0026rsquo;d like to store the code for the blog. For example, if you want to place the folder on your Desktop, the command should be: cd ~/Desktop cd means \u0026ldquo;change directory\u0026rdquo;, which will allow the terminal to change its current working directory to another location in the file system. ~ refers to the home directory on your system. It can be omitted if you\u0026rsquo;re already in the home directory.\nIf you want to place your folder in a different location, you will need to modify the code with the actual path. Learn more about the command line here for your reference.\nRun this command with your own site name to create the necessary directory structure for your website. For example, the exact command I used is hugo new site gigigatgat. hugo new site \u0026lt;your-site-name\u0026gt; You should see a folder with the name \u0026lt;your-site-name\u0026gt; on your desktop or your selected location. The folder should include eight subfolders and one configuration file: ├─ archetypes ├─ assets ├─ content ├─ data ├─ hugo.toml ├─ i18n ├─ layouts ├─ static ├─ themes The names and quantities of folders may differ depending on the Hugo version. Don\u0026rsquo;t stress too much about that. ls means \u0026ldquo;list\u0026rdquo;, which will display the contents of a directory.\n3. Download and Configure the Blowfish Theme # If you\u0026rsquo;d like to use another theme, please refer to the specific theme\u0026rsquo;s documentation and then proceed to Step5: Preview and Publish. Download the Blowfish theme # Run the following commands one by one. Make sure you replace \u0026lt;your-site-name\u0026gt; with the actual folder name. cd \u0026lt;your-site-name\u0026gt; git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Check the themes folder in this project. The Blowfish theme should be cloned in this folder. Set up the basic configuration files # In the root folder of your website project, delete the initial hugo.toml file. Copy all the config files from the themes/blowfish/config/_default/ folder to the config/_default/ folder in your root folder. After the previous steps, your folder should look as follows: The official installation, configuration, and updates guide could be found here. Please note that some file names are different because of the version of Hugo. If you\u0026rsquo;re using Hugo Version 0.119.0 or later, my instructions are the most up-to-date.\n4. Dive into the Blowfish Theme # I strongly recommend that you go through the official Blowfish Documentation Series to develop a comprehensive understanding towards the various parameters of the files and functionalities of the theme. This section serves as a quick start for a basic blog and provides some additional explanations based on the documentation.\nIn the theme files, you\u0026rsquo;ll see the # character frequently which is used to denote comments. Removing the # character will activate the line of code.\nModify the configuration files # # config.toml # Set the parameters as below and note that:\nUpdate the baseURL as https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repository-name\u0026gt;. You\u0026rsquo;ll set up the repository in GitHub later. My baseURL in this case is https://avocadoTiff.github.io/gigigatgat. You may want to change the defaultContentLanguage to \u0026ldquo;zh-CN\u0026rdquo; for simplified Chinese or \u0026ldquo;zh-tw\u0026rdquo; for traditional Chinese. Other available languages could be found here. # config/_default/config.toml theme = \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repository-name\u0026gt;\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; # languages.en.toml # If your website language is English, you can just modify the following parts of the file:\n# config/_default/languages.en.toml title = \u0026#34;\u0026lt;your-site-name\u0026gt;\u0026#34; [author] name = \u0026#34;your name\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; headline = \u0026#34;I\u0026#39;m only human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { email = \u0026#34;mailto:hello@your_domain.com\u0026#34; }, { instagram = \u0026#34;https://instagram.com/username\u0026#34; }, { mastodon = \u0026#34;https://mastodon.instance/@username\u0026#34; } ] If the defaultContentLanguage you set in the config.toml file is \u0026ldquo;zh-CN\u0026rdquo;, you should rename this file as languages.zh-CN.toml and update the code as below:\n# config/_default/languages.zh-CN.toml languageCode = \u0026#34;zh-CN\u0026#34; languageName = \u0026#34;Chinese\u0026#34; weight = 1 title = \u0026#34;\u0026lt;your-site-name\u0026gt;\u0026#34; [params] displayName = \u0026#34;中文\u0026#34; isoCode = \u0026#34;zh-CN\u0026#34; rtl = false dateFormat = \u0026#34;2 January 2006\u0026#34; # logo = \u0026#34;img/logo.png\u0026#34; [author] name = \u0026#34;Your name\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; headline = \u0026#34;I\u0026#39;m only human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { email = \u0026#34;mailto:hello@your_domain.com\u0026#34; }, { instagram = \u0026#34;https://instagram.com/username\u0026#34; }, { mastodon = \u0026#34;https://mastodon.instance/@username\u0026#34; } ] The images should be placed in the site’s assets/img/ folder. In the [params] section displayName will only be displayed when the language switch function is used logo represents the site\u0026rsquo;s logo In the [author] section image is your profile image headline will be displayed on the homepage bio will be displayed in the articles if you set showAuthor = true in the params.toml links are the social media icons with links that you\u0026rsquo;d like to share For links, the correct syntax is: links = [{item1}, {item2}, {item3}]. Avoid omitting any punctuation or adding an extra comma after the last item. # menus.en.toml # Refer to the code below for basic menu settings:\n# config/_default/menus.en.toml [[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tech\u0026#34; parent = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;categories/tech\u0026#34; weight = 20 [[main]] name = \u0026#34;Kitchen\u0026#34; parent = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;categories/kitchen\u0026#34; weight = 30 [[main]] name = \u0026#34;About\u0026#34; pageRef = \u0026#34;about\u0026#34; weight = 70 [[main]] identifier = \u0026#34;github\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;your-url-link\u0026#34; weight = 100 [[footer]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 10 [[footer]] name = \u0026#34;Categories\u0026#34; pageRef = \u0026#34;categories\u0026#34; weight = 20 name specifies the text will be displayed in the menu link. pageRef specifies where the Hugo page would be directed to. You need to have corresponding pages in the content folder to be linked to. parent is used for nested menus. identifier and pre are used to place icons in the menu. url is for linking to external URLs. weight is used to sort the menu links in ascending order. The lowest weight will be displayed as the first item in the menu. Similar with above, rename the file as menus.zh-CN.toml if simplified Chinese is your site\u0026rsquo;s defaultContentLanguage.\n# params.toml # This file specifies a wide range of theme parameters that you can use to customize your site. To ensure a smooth start, I suggest you modify the following lines in the file:\n# config/_default/params.toml mainSections = [\u0026#34;posts\u0026#34;] disableImageOptimization = false defaultBackgroundImage = \u0026#34;/img/ocean.jpg\u0026#34; defaultFeaturedImage = \u0026#34;/img/ocean.jpg\u0026#34; highlightCurrentMenuArea = true smartTOC = true smartTOCHideUnfocusedChildren = false [header] layout = \u0026#34;fixed\u0026#34; # valid options: basic, fixed, fixed-fill, fixed-fill-blur [homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom # homepageImage = \u0026#34;/img/ocean.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 10 showMoreLink = false showMoreLinkDest = \u0026#34;posts\u0026#34; cardView = false cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [article] showTableOfContents = true showTaxonomies = true Again, the images should be placed in the site’s assets/img/ folder. For now you can copy all the files from the themes/blowfish/exampleSite/assets/ folder to the assets folder in your root folder for convenience. mainSections is related to the content you\u0026rsquo;d like to display in the Recent articles on the homepage. Refer to the Blowfish Configuration article for more details and experiment with the rest parameters later. Add pages to your site # - Content Organization # All content is placed within the content folder. Below is an example of the content structure based on the above menu:\n. ├── assets │ └── img │ └── ocean.jpg | └── logo.png ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ ├── categories │ │ ├── _index.md │ │ ├── tech │ │ │ └── _index.md │ │ └── kithen │ │ └── _index.md │ ├── tags │ │ └── _index.md │ └── posts │ ├── _index.md │ └── first-post │ ├── featured.jpg │ └── index.md └── themes └── blowfish - Add Content # There are two ways to add content in the site project: you can either use the GUI (Graphical User Interface) or the CLI (Command Line Interface).\nGUI: Simply create new folders, copy and paste files, edit them in your code editor. The example files can be found at themes/blowfish/exampleSite/content/ folder. Don\u0026rsquo;t copy all of the example files. Simplify the main content to plain text immediately, as the old content may be related to other files and could cause errors. CLI: Copy default.md from themes/blowfish/exampleSite/archetypes/ folder to replace the initial one in the archetypesfolder in your root directory. Use the terminal to run this Hugo command to create a new page: hugo new content posts/my-first-post/index.md This command will create an index.md file in the content/posts/my-first-post folder based on the front matter template defined in the archetypes folder. If you open the file in your code editor, it will now look like this:\n--- title: \u0026#34;Index\u0026#34; date: 2023-11-02T16:21:18-04:00 draft: true --- - Branch pages # Branch pages include the homepage, section listings, and taxonomy pages. The filename for this content type is _index.md. As you can see in the above content structure, the content/_index.md file defines the content of the homepage, and the content/posts/_index.md file defines the content of the posts page. In this example, I only specified the title, description, and whether the posts list on this page would be grouped by year:\n--- title: \u0026#34;Posts\u0026#34; description: \u0026#34;All posts\u0026#34; groupByYear: true --- - Leaf pages # Leaf pages are single pages that don\u0026rsquo;t contain a list of sub-pages. It is named as index.md in the corresponding post folder for an individual article page or about.md for an about page. My index.md file in the content/posts/Getting Started with Entity Framework Core in Visual Studio folder looks like this:\n--- title: \u0026#34;Getting Started with Entity Framework Core in Visual Studio\u0026#34; date: 2023-10-24 draft: false description: \u0026#34;How to use Entity Framework Core to connect database in Visual Studio\u0026#34; slug: \u0026#34;how to use Entity Framework Core\u0026#34; tags: [\u0026#34;tutorial\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;ASP.NET\u0026#34;, \u0026#34;VisualStudio\u0026#34;] categories: [\u0026#34;Tech\u0026#34;] --- Entity Framework Core is a powerful tool for simplifying database integration with web applications... draft determines whether this content is ready to be published or not. If it is set to true, the content will not be visible when you build the site. slug is used in the URL path when the content is published. In my case, the link for this post would be https://tiffahahahu7.github.io/gigigatgat/posts/how-to-use-entity-framework-core/. tags and categories are defined here to be displayed on the Tags and Categories pages. The body of the post is written in markdown, an easy-to-use text formatting language. I strongly recommend familiarizing yourself with it. For more explanations, you can refer to Blowfish\u0026rsquo;s Content Examples and Front Matter.\n5. Preview and Publish # Run this command in the terminal to preview the site in your browser, with the given URL address http://localhost:1313/ or http://localhost:1313/\u0026lt;repository-name\u0026gt; depending on your baseURL. hugo server Make sure that the draft value for the pages you want to display is set to false; otherwise, they won\u0026rsquo;t appear in the browser, unless you run hugo server -D. If you site doesn\u0026rsquo;t render your posts correctly, double-check the rules for content organization.\nModify the content and configuration until you\u0026rsquo;re satisfied with the preview. Tags and Categories may not be updated immediately. In this case, try to exit by pressing Ctrl + C and restart hugo server to see the changes. In the root directory, run the following command to publish the site. It will create a public folder with the entire static files necessary for your website. hugo 6. How to Deploy the Site with GitHub Pages # Go to your GitHub Account and create a new repository. The repository name should be in accordance with your baseURL in the config.toml file. Run the following commands to add the GitHub repository as a remote repository and push all the local files to it. Remember to replace with your own remote URL. git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/avocadoTiff/gigigatgat.git git push -u origin main If you encounter a prompt requiring your GitHub username and password. Enter your personal access token as the password instead of your account password. Change your directory into public. Run the following commands to connect to the remote repository and create a gh-pages branch cd public git init git remote add origin https://github.com/avocadoTiff/gigigatgat.git git checkout --orphan gh-pages Run the following commands to upload the files to gh-pages branch git add . git commit -m \u0026#34;upload site files\u0026#34; git push -u origin gh-pages In the Settings \u0026gt; Pages, ensure that the GitHub Pages site is being built from the gh-pages branch Wait for a few minutes and refresh the page. You\u0026rsquo;ll see a message like this: Your site is live at https://avocadotiff.github.io/gigigatgat/. 🎉 Congrats! Your blog is now live online!\n7. How to Update Your Blog # Once you make any modification or add new posts to your blog, you can update your blog by three steps:\nIn the root directory, review you site preview by executing the command hugo server and then run the command hugo to update the site files in the public folder. Ensure that you\u0026rsquo;re still in the in the root directory and run the following commands: git add . git commit -m \u0026#34;add new posts\u0026#34; git push -u origin main Change your directory into public by the command cd public and run the following commands: git add . git commit -m \u0026#34;add new posts\u0026#34; git push -u origin gh-pages This is the most basic way of updating your blog manually. You can also automate the deployment process with GitHub Actions, which is a more advanced and efficient method. I\u0026rsquo;m still in the process of learning GitHub Actions, and I\u0026rsquo;ll keep you updated if I come across an easier way to comprehend and make use of this tool. Thank you for reading this far! I hope this tutorial can help you in building your personal blog smoothly. If you have any questions during the process, please feel free to reach out. I\u0026rsquo;m more than happy to help create another blog in the universe.\nReference # Hugo Documentation Blowfish Documentation Series Create a static website with Hugo and Host it with Github Pages ","date":"4 November 2023","permalink":"/posts/how-to-create-a-blog/","section":"博客","summary":"Everyone deserves to own a blog. I\u0026rsquo;m here to help.","title":"A Beginner-Friendly Tutorial for Building a Blog with Hugo, the Blowfish Theme, and GitHub Pages"},{"content":"","date":"4 November 2023","permalink":"/tags/blog/","section":"標籤","summary":"","title":"blog"},{"content":"To demo how to build a blog for beginners, I created a new user on my macOS and reinstalled Hugo in the new environment. However, the latest Hugo version, 0.120.3, unfortunately has some compatibility issues with the installed Blowfish module. For example, certain configuration parameters such as showDate, showView, showLikes cannot be rendered correctly on my site. While this issue may be resolved in future version updates, I would like to revert to my previous Hugo version, 0.119.0, for the time being.\nbrew install hugo@0.119.0 was my initial thought, but it didn\u0026rsquo;t work as expected. After some research, I found that Manuel Martinez\u0026rsquo;s method worked best for me. Below are the exact procedures with a few adjustments.\nProcedures # 1. Download a Specific Hugo Version # Visit Hugo releases on GitHub and search for the version that you want to install Click on the specific version number link and scroll down to the Assets section Choose the package that matches your operating system. The one I downloaded is hugo_extended_0.119.0_darwin-universal.tar.gz Verify the package\u0026rsquo;s contents before extracting it using the command: tar tvf ~/Downloads/hugo_extended_0.119.0_darwin-universal.tar.gz Remember to change the path if your package is downloaded in a different location. You\u0026rsquo;ll see something like below in the terminal:\n-rwxr-xr-x 0 root root 145442184 Sep 24 11:29 hugo -rw-r--r-- 0 root root 12810 Sep 24 11:19 README.md -rw-r--r-- 0 root root 11347 Sep 24 11:19 LICENSE 2. Edit the Shell Profile # Run echo $PATH to see the order of directories in your PATH. By default, you may see the result starts with /opt/homebrew/bin/hugo Run the following command to determine whether your default shell is bash or zsh echo $SHELL Depending on the type of the shell, edit the profile using one of the commands below nano ~/.bash_profile #or nano ~/.zprofile Add export PATH=\u0026quot;$HOME/bin:$PATH\u0026quot; to the beginning of the file Press Ctrl + O to save the changes and exit by pressing Ctrl + X Run one of the following commands to apply the changes to the current session source ~/.bash_profile #or source ~/.zprofile 3. Install Hugo in the Local Bin Directory # Check whether you already have a bin directory in the home directory; if not, create one ls ~/bin #or mkdir ~/bin Move to the bin directory and extract the tarball cd ~/bin tar -xvzf ~/Downloads/hugo_extended_0.119.0_darwin-universal.tar.gz 4. Verify the Installation # Run which hugo to confirm Hugo is in the local bin directory Re-run echo $PATH. It should now begin with the path /Users/\u0026lt;your-user-name\u0026gt;/bin Run hugo version to display the Hugo version your system is using Reference # Install Specific Version Hugo MacOS ","date":"4 November 2023","permalink":"/posts/install-specific-hugo-version/","section":"博客","summary":"To demo how to build a blog for beginners, I created a new user on my macOS and reinstalled Hugo in the new environment.","title":"How to Install a Specific Version of Hugo on macOS"},{"content":" Let\u0026rsquo;s make blogging great again! 事情要從2023年8月，我偶然間讀到豆豉老師的 《2023 年了你为什么需要写博客》開始說起。雖然離我讀到這篇文章已經過去快3個月了，但我依然能想起讀完後那種熱血沸騰、想擼起袖子大幹一場的澎湃心情（。她分享的所有理由都說到了我的心坎裡，而且我也已經擁有讀寫代碼的基本能力，我覺得沒有理由不受這個號召行動起來。 建站是幾天時間就可以完成的任務，博客最大的挑戰是如何堅持輸出，保持這個空間的生命力。為此我想從自己的角度出發，重新梳理我寫博客的理由，激勵自己保持這個習慣。\n記錄是記憶的開瓶器 # 「你在2022年做了什麼？」Sean，我的一個Cambly tutor那天這樣問我。我當然說得出個大概：我工作、考雅思、申學校、辭職、申簽證、陪伴家人，這是我的2022年的主線。有行動力的一條主線，但很無聊。我更想記得那些細微的閃光的瞬間，那些來得快去得更快的思緒。這還是2022過去不久的情況，如果再問我「2021年做了什麼呢」，我恐怕只答得出「上班」。我本來就是個記性很差的人，我切實活過的日子、擁有的情感和蹦躂在腦海裡的想法就這樣被一年一年吞噬。時間越久，這些記憶的形狀就越模糊。 所以我決定記錄，記錄就像是把時間裝進瓶子裡的過程，讓有一天打開瓶蓋時它還能還鮮活如昔（點播一首Rebecca的Zeit in einer Flasche）。我不想辜負我認真活過的日子。如果它值得被記得，它就值得被記錄。\n一個閉上眼睛與自己對話的過程 # （真的閉上眼睛就打不了字了喂） 對我來說，寫個人博客和在社交媒體發帖的最大區別是前者更要求我與自己進行對話。在社交媒體發帖隨興隨意，想到什麼說什麼。寫博客卻需要我首先確立一個主題，重新思考我想表達什麼內容，如何組織我的語言。寫博客是一種儀式。 我不想去定義「博客應該是什麼樣的」，不同的人有不同的寫法。有的人靈光乍現就能流暢地寫出一篇博文，有的人整理總結每個月的社媒碎碎念又是一篇博文。博客未必需要太縝密的結構，但它一定涉及自我的整理和輸出，所以它至少是一個重新認識並塑造自己的過程。 過去這幾年我很懶，不僅在社交媒體的表達欲很低，私下的回顧與反思也很少，導致我的表達能力和生產效率明顯下降——光是寫這篇文就用了我將近一整天的時間！救命！我也不想失去我曾經引以為傲的對文字的感知力，所以寫博客也算是我的復健療法吧！\n我的地盤我做主 # 這大概是我選擇博客媒介最重要的理由了。在微博炸了四個號之後，我遷徙到了長毛象作為日常使用的社交媒體平台。長毛象很好，但它也有需要遵守的社區規則和自身的功能限制。我本身相熟的一些好友也因爲不了解或者不習慣長毛象的使用方式，無法與我保持日常的connection。 博客是更自由的。尤其是自建博客，它完完全全是我的空間，我可以決定它長什麼樣，有哪些功能；我可以無所顧忌地寫字，最小化自我審查的影響。同時它也是開放的。我要鏗鏘有力地在此申明：「在嘰嘰乞乞，你來去自由！」想起這兒了就順道做個客，沒想起來也完全不打緊。我的地盤我做主，什麼時候看你做主。\n共建博客宇宙 # 如果你只有我一個人的博客看，那可能怪無聊的。看的人很難養成看的習慣，寫的人也很難堅持寫下去。我喜歡上博客的其中一個原因是，博客自帶互聯網無邊界的特點，加上每個博客本身獨一無二的個性特質，探索或回訪一個博客的經歷都是珍貴而奇妙的，像在宇宙中發現一顆又一顆的星球。博客所反映出來的個人的創造力和生命力又是那樣強烈，我可以輕易從中獲得與人連結所產生的幸福感。而博客的內容又是不可預測的，它給閱讀者一個窺探寫作者生命體驗的機會，從而豐富、延展自身的生命體驗。 這一段怎麼那麼正經啊有點受不了了，總而言之，看大家的博客我很幸福！感謝堅持寫博客的每一位，我也想加入你們，成爲博客宇宙裡的一顆小小星球（並且當地主）。\n","date":"30 October 2023","permalink":"/posts/why-blogging/","section":"博客","summary":"Let\u0026rsquo;s make blogging great again! 事情要從2","title":"我為什麼開始寫博客"},{"content":" 譚仔——My comfort food all the time 在香港生活的時候想不到要吃什麼就會去譚仔（此處“譚仔”為“譚仔三哥”的簡稱，請勿與“譚仔雲南米線”混淆，三哥 is the best）吃米線，離開了之後掛念得最多的也是這一口。有一天無意間在YouTube上撞到一個 譚仔麻辣湯底食譜，試了之後也確實覺得有八分那個味兒，所以作為本站第一個菜譜隆重推薦給大家！\n寫在前面 # 米線的各種配菜你想吃什麼加什麼，不想吃什麼就從食譜裡減走什麼，沒那麼多所謂er。在此附上 譚仔官網餐牌供選擇困難症參考。\n製作湯底的材料中花椒油和淡奶是成就“譚仔味道”的點睛之筆，必不可少；辣椒粉的用量可以根據不同品牌不同產品的辛辣程度和你的吃辣水平酌情修改，請不要放成辣椒麵；豬肉精約等於豬骨濃湯寶，推薦家樂牌。\n食材準備 # 江西米粉 （推薦加拿大華超2.99$一包的江西米粉） 豬肉精 雞粉 辣椒粉 花椒油 淡奶（三花/黑白/雀巢都行） 糖/鹽 葷的配菜（雞肉/豬肉/牛肉/各種丸子/\u0026hellip;） 素的配菜（竹笙/腐皮/青菜/金針菇\u0026hellip;） 製作步驟 # 處理配菜 # 預先處理一些需要準備工序的配菜，如竹笙和腐皮需要提前泡發，加雞腿肉可能需要提前醃製炒熟，肥牛片可以單獨焯水撇除浮沫備用等等。 我個人很喜歡在米線裡加竹笙，但竹笙如果不好好處理就會有異味，可以參考我最經常使用的這個 泡發竹笙的方法。簡而言之就是去頭去尾去傘狀物，剪成段後加清水白醋鹽反覆浸泡三次左右。不加白醋只加鹽也可以，適當增加浸泡的時間，最後一次浸泡用清水再清洗一次。 煮米線 # 煮一鍋開水，水開之後下一把米線（食指抵拇指握起來虎口剛剛好一圈是我家兩個人吃的量）煮五分鐘，不時攪拌防止粘鍋。煮差不多後撈出來過一遍涼水備用。\n煮湯底 # 用一個乾淨的鍋重新煮一鍋水，水滾後轉中火下一顆豬肉精化開，一湯匙雞粉，半湯匙鹽和糖，再憑個人喜好下一至兩湯匙辣椒粉、花椒油、淡奶。攪拌均勻後可以嚐下味道再調整鹹淡。 以上是兩人份的水量和調料量。 下配菜及米線 # 先下需要久煮或者耐煮的配菜，如竹笙/牛丸/豆泡等，煮夠時間後再放易熟的其它配菜，如青菜/腐皮等。米線什麼時候放取決於你希望它軟爛或者勁道的程度，通常我會和易熟的配菜一起放。\n寫在後面 # 這款米線做熟練了之後是名副其實的快手菜：配菜這一步驟完全可以提前預備，用密封袋分裝放在冰箱冷凍層隨取隨用；煮米線和煮湯底可以同時進行，反正米線最後才放。這樣下來預計15-30分鐘就可以享用家庭版譚仔米線啦！Enjoy！ （譚仔我最喜歡的湯底是煳辣口味，但至今未能一解煳辣湯底配方之謎。在此鄭重懸賞煳辣配方線索，歡迎有志之士嘗試探索！）\n","date":"27 October 2023","permalink":"/posts/tamjai-samgor-rice-noodle/","section":"博客","summary":"譚仔——My comfort food all the","title":"在加國，復刻一碗香港經典譚仔三哥米線"},{"content":"","date":"27 October 2023","permalink":"/tags/%E7%B1%B3%E7%B7%9A/","section":"標籤","summary":"","title":"米線"},{"content":" Food Made in Our Home ","date":"27 October 2023","permalink":"/categories/kitchen/","section":"分類","summary":"Food Made in Our Home","title":"廚房故事"},{"content":"嗨！我們是 Avocado 和 Sloth，生活搭子，現居加拿大渥太華，都是半路出家轉碼大軍中的一員，學的是 Web Development。\nAvocado\n女的，INFJ 從哪裡來不重要，地球就是我的根和天地 關心女性/人權/政治/兩岸三地，也關心自己的生活 修煉中的大廚；寶可夢訓練家；不定期出沒劇院；還沒開始研究植物的植物愛好者 學過英語廣東話德語，正在學法語和日語，但是連家鄉方言在內沒一個真的講得流暢無阻的；心酸又努力的典型代表（已經很棒了！） 目前最想做的事：考出駕照；在家種菜；練大肌肉 Sloth 男的，INFP 來自香港 熱衷歷史/政治/社會學，極端福利資本主義者 失憶症患者；偶發性超強矛盾複合體 受訓中的大廚助理，但自問天分較現任大廚高（我呸） 一台能上網且配置足夠應付WOW的電腦，就可以讓我足不出戶 人生目標：盡早退休 ","date":"26 October 2023","permalink":"/about/","section":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬","summary":"嗨！我們是 Avocado 和 Slo","title":"關於我們"},{"content":"","date":"24 October 2023","permalink":"/tags/asp.net/","section":"標籤","summary":"","title":"ASP.NET"},{"content":" Entity Framework Core is a powerful tool for simplifying database integration with web applications. In this article, we\u0026rsquo;ll gain a basic understanding of Entity Framework Core and demonstrate how it streamlines the process of connecting databases to your web pages. You\u0026rsquo;ll also find step-by-step instructions to help you get started, regardless of whether you\u0026rsquo;re a Windows or Mac user. Since I\u0026rsquo;m a Mac user, most of the screenshots in this tutorial will be from a Mac system.\nWhat is Entity Framework Core? # Entity Framework Core (EF Core) is an open-source and lightweight framework developed by Microsoft. It is widely used in .NET applications to help developers interact with relational databases and convert data into entity classes in a more object-oriented manner. This tool also enables automatic generation of Razor pages with accessible data and default layout settings. You can install EF Core on NuGet public domain to your web application projects in Visual Studio.\nPrerequisites # Installed Visual Studio and MySql Workbench Connect to local instance in MySql and ensure the server status is Running A populated database to be converted to classes and displayed on web pages In my case, I created a new scheme named StudentRecord and ran the sql file StudentRecordDBBuilder.MySQL.sql to populate it Basic knowledge about ASP.NET and Razor Page Procedures # 1. Create a new ASP.NET Razor Page web application project in Visual Studio # Choose the Web Application template for creating an ASP.NET Core application with example ASP.NET Razor Page content Select .NET 7.0 as the targeted frame Uncheck Configure for HTTPS Name the project and solution as you prefer, and place the folder in a location that best suits you 2. Install Microsoft Entity Framework Core # Right click on the project folder and select Manage NuGet Packages Select Browse tab, and select nuget.org as the package source. Search and install the following three packages to the project. You may need to click Accept if a License Acceptance window pops up. MySql.EntityFrameworkCore Microsoft.EntityFrameworkCore.Tools Microsoft.VisualStudio.Web.CodeGeneration.Design Double check whether these three packages are installed successfully by expanding the project’s Dependencies and Packages or browsing the Installed tab in the NuGet Packages Manager\u0026rsquo;s window 3. Generate the entity classes from the database # Create a folder DataAccess in the project to contain the generated classes for MacOS # Select Show Terminal Window from Tools in the menu if the terminal window is hiding Run the following commands in the VS terminal window: to create a new Tool Manifest: dotnet new tool-manifest to install dotnet-ef: dotnet tool install dotnet-ef to make the dotnet-ef command available: dotnet tool restore to generate classes for each tables in the database and the DataContext class: dotnet dotnet-ef dbcontext Scaffold \u0026quot;Server=localhost; User ID=root; Password=yourPassword; Database=yourDatabaseName\u0026quot; MySql.EntityFrameworkCore -o DataAccess for Windows # Select NuGet Package Manager from Tools in the menu and start NuGet Package Manager Console Run the following command with your own credentials: Scaffold-DbContext “Server=localhost; User ID=root; Password=yourPassword; Database=yourDatabaseName” MySql.EntityFrameworkCore -o DataAccess Remember to use your own credentials in the Scaffold command instead of copying and pasting! By finishing the above steps, the Entity Framework scaffold tool will generate a set of class files in the DataAccess folder 4. Modify the DB connection string for security concerns # Add a ConnectionStrings section with one connection string using the same name of your database in the application’s configuration file appsetting.json Remove the hardcoded connection string in the DB Context Class file, e.g. StudentRecordContext.cs 5. Register the DB Access Service with the Application # In the Program.cs file, add the following statements to the beginning: using Microsoft.EntityFrameworkCore; using \u0026lt;ProjectName\u0026gt;.DataAccess; In the same file, add the following codes after builder.Services.AddRazorPages( ): string dbConnStr = builder.Configuration.GetConnectionString(\u0026#34;StudentRecord\u0026#34;); if (dbConnStr != null) { builder.Services.AddDbContext\u0026lt;StudentRecordContext\u0026gt;( options =\u0026gt; options.UseMySQL(dbConnStr)); } Select Rebuild Solution from Build in the menu and ensure that the solution build successfully 6. Generate Razor pages using Entity Framework (CRUD) # Add a new folder inside the Pages folder, right click on the folder and select Add \u0026gt; New Scaffolding Select Razor Pages using Entity Framework (CRUD) and choose the corresponding model class and data context class you\u0026rsquo;d like to apply By finishing the above steps, the CRUD Razor pages are already generated inside the folder 7. Review and modify the pages according to your needs # In the _Layout.cshtml page, add menu items in the navbar to access the newly generated pages from the index page Run the application and view the pages in browser Common Errors # Debugging is a common practice in application development. One of my biggest challenges in this project is running the Scaffold command. I\u0026rsquo;ve listed a few errors that I encountered and their respective solutions below.\n1. Unable to find provider assembly \u0026lsquo;MySql.EntityFrameworkCore\u0026rsquo; # I re-installed \u0026lsquo;MySql.EntityFrameworkCore\u0026rsquo; with a different version(7.0.5) and forgot to update it. Rebuild the solution will solve this issue.\n2. Missing required argument \u0026lsquo;\u0026lt;Provider\u0026gt;\u0026rsquo; # Double-check the quotation marks in the command. In my case, I mistakenly used Chinese quotation marks.\n3. Authentication to host \u0026rsquo;localhost\u0026rsquo; for user \u0026lsquo;root\u0026rsquo; using method \u0026lsquo;caching_sha2_password\u0026rsquo; failed with message: access denied for user \u0026lsquo;root\u0026rsquo;@\u0026rsquo;localhost\u0026rsquo; (using password: yes) # If you are absolutely certain that you are using the correct password, it\u0026rsquo;s likely that a special character in the password is causing confusion in the terminal/console. You can change the password to a simpler one or create a new temporary user with all privileges and try again.\nCredit # This blog is inspired from a lab assignment of the course CST8256 Web Programming Language I, with an original instruction written by Wei Gong.\n","date":"24 October 2023","permalink":"/posts/how-to-use-entity-framework-core/","section":"博客","summary":"Entity Framework Core is a powerful tool for simplifying database integration with web applications.","title":"Getting Started with Entity Framework Core in Visual Studio"},{"content":"","date":"24 October 2023","permalink":"/tags/visualstudio/","section":"標籤","summary":"","title":"VisualStudio"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. 🚀\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"1 January 0001","permalink":"/tags/advanced/","section":"標籤","summary":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing.","title":"Advanced"},{"content":"每次造訪友鄰的博客我都感到幸福，請大家也幸福一下。如果你碰巧有自己的博客，歡迎和我交換鏈接！\nFriends # 椒鹽豆豉：日常產出驚人的互聯網友人，復興部落格的先行者兼推動者 第三夏爾：第三宇宙中的具象生活，擁有全宇宙最好看的每月小結 豚骨拉麵館：拉麵館老闆娘，非常喜歡她的菜譜系列 D同學：人類社會的忠實觀察員與執筆者 Meiyue：東京風物記事 呼貓護衛：有一片廣袤的精神世界 AsyncX：我宣布這是我的技術向偶像，想學Astro建站的看這裡 山月：博客老人，關鍵詞掃描：日本｜語言｜詩歌｜摩爾莊園（亂入） AFTER 27：會寫獨樹一幟的每月消費總結系列，從帳單裡追溯生活和安利單品 Reading List # 還不好意思啟齒加友鏈但很愛看的博客清單：\n無竹齋：曾經被「簡易做飯指南合集」騙進去結果被攝影圖美得怔住 小球飛魚：水屬性和飛行屬性的寶可夢，同時擁有迷惑性的超能力技能，不然很難解釋為什麼陷進她的博客就容易走不出來 A Purrception：從象友轉發的月經盤文章摸到的博客，看文字就覺得是好可愛的人喔 Middle of Nowhere：一起做一個湊活環保主義者！ Mavis Meow\u0026rsquo;s Blog：一隻坐標西雅圖但或許即將登陸加拿大的貓，做事寫文記帳都非常有條理 眠於水月間：月球上也可以放煙花和逗貓 小觸手的書房：全世界最會拆解知識點的畫手，看了一篇 《用畫畫的方式學車》垂直入坑 沉沒之沙：隨緣更新的高質量博客，很多篇實用經驗帖都是我感興趣的領域 唉，瀾的：剛剛出版了一本食譜電子書的厲害友鄰，專精美食與攝影 新鮮棕櫚葉下：非常清爽直接的菜單分類，喜歡翻「隨筆」、「美食」、「遊戲」和「測評」 未完待續\u0026hellip; ","date":"1 January 0001","permalink":"/friends/","section":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬","summary":"每次造訪友鄰的博客我","title":"友情鏈接"}]