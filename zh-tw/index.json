[{"content":" Everyone deserves to own a blog. I\u0026rsquo;m here to help. 中文版特供前言:\n此文獻給所有想建博客卻苦於難以入門的朋友。\n作為也才轉碼十個月的新手，我深知那種熟悉一個新的工具、配置一個新的環境的迷茫和挫敗感。特別是對於零coding基礎的人而言，建站這個概念可能一開始就已經讓他們望而生畏。這篇文章的閱讀時間是14分鐘，如果一步一步跟做，預估時間會在1-3小時左右，取決於configuration部分定制化的複雜程度和是否衍生閱讀。如果你花的時間更長一點也不要緊，畢竟我從頭嘗試建站+寫這篇教程用了足足將近三個星期的時間。如果你在某一步卡殼無法繼續，歡迎留言提問或者直接聯繫我。\n我的方案可能不是最優最普遍的做法。相比網上搜索到的其他教程，我只用了一個GitHub repository而非兩個。GitHub Actions的自動部署也還沒搞明白，歡迎路過的大神指教😭。但我可以確保的是我將所有步驟和注意點寫得足夠詳細，並成功試驗了一遍教程所示的建站和更新流程，順便再擺個 demo版的repository供大家回頭參考。\n我希望通過這篇小白級教程最小化免費建站的門檻，誘騙？ 邀請更多朋友加入我們復興博客宇宙的宏圖大業！\nThere are numerous ways to build a blog. You can choose popular platforms like WordPress, Medium, or Notion for simplicity, or craft static web pages using frameworks like Hugo and Hexo if you\u0026rsquo;re comfortable with a touch of coding. My personal preference leans toward the latter because it offers greater customization, cost-effectiveness, and stability. If you\u0026rsquo;re curious about selecting the right blogging tool for you, you can also check out this Chinese blog written by Douchi for valuable insights.\nThis article is written for people who are interested in creating a blog on their own but have minimal coding experience. It focuses on using Hugo and GitHub as the main tools for creating a blog. Hugo offers hundreds of themes with diverse styles and functions that you can explore to suit your personal needs. I would recommend the Blowfish theme, which is one of the most advanced and flexible themes in Hugo with attractive layout and detailed documentation. If you prefer to use a different theme, simply refer to the documentation of your chosen theme when it comes to theme-specific steps.\nPrerequisites # No prior background knowledge is needed. I will try to explain everything in the procedures and feel free to leave a comment if you have any questions during the setup.\nHowever, to ensure a smooth follow-along experience, please complete the following steps before getting started:\nSign up for a GitHub Account and generate a personal access token following this tutorial Copy the token and store it somewhere else, because you won\u0026rsquo;t be able to see it again on GitHub. Download a code editor if you don\u0026rsquo;t have one Visual Studio Code, recommended for individuals with long-term coding needs Sublime Text, recommended for beginners Install Git on your system You can check whether Git is already installed by running git --version in the terminal If you\u0026rsquo;re a Mac user, please install homebrew first, which will make your life much easier For coding newbies, the installation steps are essentially copying and pasting commands into the terminal. You can find the macOS Terminal in the Utilities folder within the Applications folder, or simply search for it using Spotlight; Windows user please use PowerShell.\nThat\u0026rsquo;s it! You\u0026rsquo;re ready to start now.\nProcedures # 1. Install Hugo # for MacOS\nRun this command in the terminal. This will install the extended edition of Hugo. brew install hugo Enter this command in the terminal to verify whether Hugo is installed successfully. hugo version for Windows\nRefer to Hugo Installation Instructions or this tutorial on Windows 10 2. Create a Hugo Site # For Windows users, please only use PowerShell for the following commands as required by Hugo. Do not use the Command Prompt or Windows PowerShell. PowerShell and Windows PowerShell are different applications. Run the cd command to navigate to the folder where you\u0026rsquo;d like to store the code for the blog. For example, if you want to place the folder on your Desktop, the command should be: cd ~/Desktop cd means \u0026ldquo;change directory\u0026rdquo;, which will allow the terminal to change its current working directory to another location in the file system. ~ refers to the home directory on your system. It can be omitted if you\u0026rsquo;re already in the home directory.\nIf you want to place your folder in a different location, you will need to modify the code with the actual path. Learn more about the command line here for your reference.\nRun this command with your own site name to create the necessary directory structure for your website. For example, the exact command I used is hugo new site gigigatgat. hugo new site \u0026lt;your-site-name\u0026gt; You should see a folder with the name \u0026lt;your-site-name\u0026gt; on your desktop or your selected location. The folder should include eight subfolders and one configuration file: ├─ archetypes ├─ assets ├─ content ├─ data ├─ hugo.toml ├─ i18n ├─ layouts ├─ static ├─ themes The names and quantities of folders may differ depending on the Hugo version. Don\u0026rsquo;t stress too much about that. ls means \u0026ldquo;list\u0026rdquo;, which will display the contents of a directory.\n3. Download and Configure the Blowfish Theme # If you\u0026rsquo;d like to use another theme, please refer to the specific theme\u0026rsquo;s documentation and then proceed to Step5: Preview and Publish. Download the Blowfish theme # Run the following commands one by one. Make sure you replace \u0026lt;your-site-name\u0026gt; with the actual folder name. cd \u0026lt;your-site-name\u0026gt; git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Check the themes folder in this project. The Blowfish theme should be cloned in this folder. Set up the basic configuration files # In the root folder of your website project, delete the initial hugo.toml file. Copy all the config files from the themes/blowfish/config/_default/ folder to the config/_default/ folder in your root folder. After the previous steps, your folder should look as follows: The official installation, configuration, and updates guide could be found here. Please note that some file names are different because of the version of Hugo. If you\u0026rsquo;re using Hugo Version 0.119.0 or later, my instructions are the most up-to-date.\n4. Dive into the Blowfish Theme # I strongly recommend that you go through the official Blowfish Documentation Series to develop a comprehensive understanding towards the various parameters of the files and functionalities of the theme. This section serves as a quick start for a basic blog and provides some additional explanations based on the documentation.\nIn the theme files, you\u0026rsquo;ll see the # character frequently which is used to denote comments. Removing the # character will activate the line of code.\nModify the configuration files # # config.toml # Set the parameters as below and note that:\nUpdate the baseURL as https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repository-name\u0026gt;. You\u0026rsquo;ll set up the repository in GitHub later. My baseURL in this case is https://avocadoTiff.github.io/gigigatgat. You may want to change the defaultContentLanguage to \u0026ldquo;zh-CN\u0026rdquo; for simplified Chinese or \u0026ldquo;zh-tw\u0026rdquo; for traditional Chinese. Other available languages could be found here. # config/_default/config.toml theme = \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repository-name\u0026gt;\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; # languages.en.toml # If your website language is English, you can just modify the following parts of the file:\n# config/_default/languages.en.toml title = \u0026#34;\u0026lt;your-site-name\u0026gt;\u0026#34; [author] name = \u0026#34;your name\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; headline = \u0026#34;I\u0026#39;m only human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { email = \u0026#34;mailto:hello@your_domain.com\u0026#34; }, { instagram = \u0026#34;https://instagram.com/username\u0026#34; }, { mastodon = \u0026#34;https://mastodon.instance/@username\u0026#34; } ] If the defaultContentLanguage you set in the config.toml file is \u0026ldquo;zh-CN\u0026rdquo;, you should rename this file as languages.zh-CN.toml and update the code as below:\n# config/_default/languages.zh-CN.toml languageCode = \u0026#34;zh-CN\u0026#34; languageName = \u0026#34;Chinese\u0026#34; weight = 1 title = \u0026#34;\u0026lt;your-site-name\u0026gt;\u0026#34; [params] displayName = \u0026#34;中文\u0026#34; isoCode = \u0026#34;zh-CN\u0026#34; rtl = false dateFormat = \u0026#34;2 January 2006\u0026#34; # logo = \u0026#34;img/logo.png\u0026#34; [author] name = \u0026#34;Your name\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; headline = \u0026#34;I\u0026#39;m only human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { email = \u0026#34;mailto:hello@your_domain.com\u0026#34; }, { instagram = \u0026#34;https://instagram.com/username\u0026#34; }, { mastodon = \u0026#34;https://mastodon.instance/@username\u0026#34; } ] The images should be placed in the site’s assets/img/ folder. In the [params] section displayName will only be displayed when the language switch function is used logo represents the site\u0026rsquo;s logo In the [author] section image is your profile image headline will be displayed on the homepage bio will be displayed in the articles if you set showAuthor = true in the params.toml links are the social media icons with links that you\u0026rsquo;d like to share For links, the correct syntax is: links = [{item1}, {item2}, {item3}]. Avoid omitting any punctuation or adding an extra comma after the last item. # menus.en.toml # Refer to the code below for basic menu settings:\n# config/_default/menus.en.toml [[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tech\u0026#34; parent = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;categories/tech\u0026#34; weight = 20 [[main]] name = \u0026#34;Kitchen\u0026#34; parent = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;categories/kitchen\u0026#34; weight = 30 [[main]] name = \u0026#34;About\u0026#34; pageRef = \u0026#34;about\u0026#34; weight = 70 [[main]] identifier = \u0026#34;github\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;your-url-link\u0026#34; weight = 100 [[footer]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 10 [[footer]] name = \u0026#34;Categories\u0026#34; pageRef = \u0026#34;categories\u0026#34; weight = 20 name specifies the text will be displayed in the menu link. pageRef specifies where the Hugo page would be directed to. You need to have corresponding pages in the content folder to be linked to. parent is used for nested menus. identifier and pre are used to place icons in the menu. url is for linking to external URLs. weight is used to sort the menu links in ascending order. The lowest weight will be displayed as the first item in the menu. Similar with above, rename the file as menus.zh-CN.toml if simplified Chinese is your site\u0026rsquo;s defaultContentLanguage.\n# params.toml # This file specifies a wide range of theme parameters that you can use to customize your site. To ensure a smooth start, I suggest you modify the following lines in the file:\n# config/_default/params.toml mainSections = [\u0026#34;posts\u0026#34;] disableImageOptimization = false defaultBackgroundImage = \u0026#34;/img/ocean.jpg\u0026#34; defaultFeaturedImage = \u0026#34;/img/ocean.jpg\u0026#34; highlightCurrentMenuArea = true smartTOC = true smartTOCHideUnfocusedChildren = false [header] layout = \u0026#34;fixed\u0026#34; # valid options: basic, fixed, fixed-fill, fixed-fill-blur [homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom # homepageImage = \u0026#34;/img/ocean.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 10 showMoreLink = false showMoreLinkDest = \u0026#34;posts\u0026#34; cardView = false cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [article] showTableOfContents = true showTaxonomies = true Again, the images should be placed in the site’s assets/img/ folder. For now you can copy all the files from the themes/blowfish/exampleSite/assets/ folder to the assets folder in your root folder for convenience. mainSections is related to the content you\u0026rsquo;d like to display in the Recent articles on the homepage. Refer to the Blowfish Configuration article for more details and experiment with the rest parameters later. Add pages to your site # - Content Organization # All content is placed within the content folder. Below is an example of the content structure based on the above menu:\n. ├── assets │ └── img │ └── ocean.jpg | └── logo.png ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ ├── categories │ │ ├── _index.md │ │ ├── tech │ │ │ └── _index.md │ │ └── kithen │ │ └── _index.md │ ├── tags │ │ └── _index.md │ └── posts │ ├── _index.md │ └── first-post │ ├── featured.jpg │ └── index.md └── themes └── blowfish - Add Content # There are two ways to add content in the site project: you can either use the GUI (Graphical User Interface) or the CLI (Command Line Interface).\nGUI: Simply create new folders, copy and paste files, edit them in your code editor. The example files can be found at themes/blowfish/exampleSite/content/ folder. Don\u0026rsquo;t copy all of the example files. Simplify the main content to plain text immediately, as the old content may be related to other files and could cause errors. CLI: Copy default.md from themes/blowfish/exampleSite/archetypes/ folder to replace the initial one in the archetypesfolder in your root directory. Use the terminal to run this Hugo command to create a new page: hugo new content posts/my-first-post/index.md This command will create an index.md file in the content/posts/my-first-post folder based on the front matter template defined in the archetypes folder. If you open the file in your code editor, it will now look like this:\n--- title: \u0026#34;Index\u0026#34; date: 2023-11-02T16:21:18-04:00 draft: true --- - Branch pages # Branch pages include the homepage, section listings, and taxonomy pages. The filename for this content type is _index.md. As you can see in the above content structure, the content/_index.md file defines the content of the homepage, and the content/posts/_index.md file defines the content of the posts page. In this example, I only specified the title, description, and whether the posts list on this page would be grouped by year:\n--- title: \u0026#34;Posts\u0026#34; description: \u0026#34;All posts\u0026#34; groupByYear: true --- - Leaf pages # Leaf pages are single pages that don\u0026rsquo;t contain a list of sub-pages. It is named as index.md in the corresponding post folder for an individual article page or about.md for an about page. My index.md file in the content/posts/Getting Started with Entity Framework Core in Visual Studio folder looks like this:\n--- title: \u0026#34;Getting Started with Entity Framework Core in Visual Studio\u0026#34; date: 2023-10-24 draft: false description: \u0026#34;How to use Entity Framework Core to connect database in Visual Studio\u0026#34; slug: \u0026#34;how to use Entity Framework Core\u0026#34; tags: [\u0026#34;tutorial\u0026#34;, \u0026#34;code\u0026#34;, \u0026#34;ASP.NET\u0026#34;, \u0026#34;VisualStudio\u0026#34;] categories: [\u0026#34;Tech\u0026#34;] --- Entity Framework Core is a powerful tool for simplifying database integration with web applications... draft determines whether this content is ready to be published or not. If it is set to true, the content will not be visible when you build the site. slug is used in the URL path when the content is published. In my case, the link for this post would be https://tiffahahahu7.github.io/gigigatgat/posts/how-to-use-entity-framework-core/. tags and categories are defined here to be displayed on the Tags and Categories pages. The body of the post is written in markdown, an easy-to-use text formatting language. I strongly recommend familiarizing yourself with it. For more explanations, you can refer to Blowfish\u0026rsquo;s Content Examples and Front Matter.\n5. Preview and Publish # Run this command in the terminal to preview the site in your browser, with the given URL address http://localhost:1313/ or http://localhost:1313/\u0026lt;repository-name\u0026gt; depending on your baseURL. hugo server Make sure that the draft value for the pages you want to display is set to false; otherwise, they won\u0026rsquo;t appear in the browser, unless you run hugo server -D. If you site doesn\u0026rsquo;t render your posts correctly, double-check the rules for content organization.\nModify the content and configuration until you\u0026rsquo;re satisfied with the preview. Tags and Categories may not be updated immediately. In this case, try to exit by pressing Ctrl + C and restart hugo server to see the changes. In the root directory, run the following command to publish the site. It will create a public folder with the entire static files necessary for your website. hugo 6. How to Deploy the Site with GitHub Pages # Go to your GitHub Account and create a new repository. The repository name should be in accordance with your baseURL in the config.toml file. Run the following commands to add the GitHub repository as a remote repository and push all the local files to it. Remember to replace with your own remote URL. git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/avocadoTiff/gigigatgat.git git push -u origin main If you encounter a prompt requiring your GitHub username and password. Enter your personal access token as the password instead of your account password. Change your directory into public. Run the following commands to connect to the remote repository and create a gh-pages branch cd public git init git remote add origin https://github.com/avocadoTiff/gigigatgat.git git checkout --orphan gh-pages Run the following commands to upload the files to gh-pages branch git add . git commit -m \u0026#34;upload site files\u0026#34; git push -u origin gh-pages In the Settings \u0026gt; Pages, ensure that the GitHub Pages site is being built from the gh-pages branch Wait for a few minutes and refresh the page. You\u0026rsquo;ll see a message like this: Your site is live at https://avocadotiff.github.io/gigigatgat/. 🎉 Congrats! Your blog is now live online!\n7. How to Update Your Blog # Once you make any modification or add new posts to your blog, you can update your blog by three steps:\nIn the root directory, review you site preview by executing the command hugo server and then run the command hugo to update the site files in the public folder. Ensure that you\u0026rsquo;re still in the in the root directory and run the following commands: git add . git commit -m \u0026#34;add new posts\u0026#34; git push -u origin main Change your directory into public by the command cd public and run the following commands: git add . git commit -m \u0026#34;add new posts\u0026#34; git push -u origin gh-pages This is the most basic way of updating your blog manually. You can also automate the deployment process with GitHub Actions, which is a more advanced and efficient method. I\u0026rsquo;m still in the process of learning GitHub Actions, and I\u0026rsquo;ll keep you updated if I come across an easier way to comprehend and make use of this tool. Thank you for reading this far! I hope this tutorial can help you in building your personal blog smoothly. If you have any questions during the process, please feel free to reach out. I\u0026rsquo;m more than happy to help create another blog in the universe.\nReference # Hugo Documentation Blowfish Documentation Series Create a static website with Hugo and Host it with Github Pages ","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/posts/how-to-create-a-blog/","section":"博客","summary":"Everyone deserves to own a blog. I\u0026rsquo;m here to help.","title":"A Beginner-Friendly Tutorial for Building a Blog with Hugo, the Blowfish Theme, and GitHub Pages"},{"content":"你也喜歡牛油果嗎？\n","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/authors/avocado/","section":"作者","summary":"你也喜歡牛油果嗎？","title":"Avocado (Tiffany)"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/tags/blog/","section":"標籤","summary":"","title":"blog"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/tags/code/","section":"標籤","summary":"","title":"code"},{"content":"To demo how to build a blog for beginners, I created a new user on my macOS and reinstalled Hugo in the new environment. However, the latest Hugo version, 0.120.3, unfortunately has some compatibility issues with the installed Blowfish module. For example, certain configuration parameters such as showDate, showView, showLikes cannot be rendered correctly on my site. While this issue may be resolved in future version updates, I would like to revert to my previous Hugo version, 0.119.0, for the time being.\nbrew install hugo@0.119.0 was my initial thought, but it didn\u0026rsquo;t work as expected. After some research, I found that Manuel Martinez\u0026rsquo;s method worked best for me. Below are the exact procedures with a few adjustments.\nProcedures # 1. Download a Specific Hugo Version # Visit Hugo releases on GitHub and search for the version that you want to install Click on the specific version number link and scroll down to the Assets section Choose the package that matches your operating system. The one I downloaded is hugo_extended_0.119.0_darwin-universal.tar.gz Verify the package\u0026rsquo;s contents before extracting it using the command: tar tvf ~/Downloads/hugo_extended_0.119.0_darwin-universal.tar.gz Remember to change the path if your package is downloaded in a different location. You\u0026rsquo;ll see something like below in the terminal:\n-rwxr-xr-x 0 root root 145442184 Sep 24 11:29 hugo -rw-r--r-- 0 root root 12810 Sep 24 11:19 README.md -rw-r--r-- 0 root root 11347 Sep 24 11:19 LICENSE 2. Edit the Shell Profile # Run echo $PATH to see the order of directories in your PATH. By default, you may see the result starts with /opt/homebrew/bin/hugo Run the following command to determine whether your default shell is bash or zsh echo $SHELL Depending on the type of the shell, edit the profile using one of the commands below nano ~/.bash_profile #or nano ~/.zprofile Add export PATH=\u0026quot;$HOME/bin:$PATH\u0026quot; to the beginning of the file Press Ctrl + O to save the changes and exit by pressing Ctrl + X Run one of the following commands to apply the changes to the current session source ~/.bash_profile #or source ~/.zprofile 3. Install Hugo in the Local Bin Directory # Check whether you already have a bin directory in the home directory; if not, create one ls ~/bin #or mkdir ~/bin Move to the bin directory and extract the tarball cd ~/bin tar -xvzf ~/Downloads/hugo_extended_0.119.0_darwin-universal.tar.gz 4. Verify the Installation # Run which hugo to confirm Hugo is in the local bin directory Re-run echo $PATH. It should now begin with the path /Users/\u0026lt;your-user-name\u0026gt;/bin Run hugo version to display the Hugo version your system is using Reference # Install Specific Version Hugo MacOS ","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/posts/install-specific-hugo-version/","section":"博客","summary":"To demo how to build a blog for beginners, I created a new user on my macOS and reinstalled Hugo in the new environment.","title":"How to Install a Specific Version of Hugo on macOS"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/tags/hugo/","section":"標籤","summary":"","title":"hugo"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/tags/tutorial/","section":"標籤","summary":"","title":"tutorial"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/categories/","section":"分類","summary":"","title":"分類"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/authors/","section":"作者","summary":"","title":"作者"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/posts/","section":"博客","summary":"","title":"博客"},{"content":"","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/tags/","section":"標籤","summary":"","title":"標籤"},{"content":" More Than Web Development ","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/categories/tech/","section":"分類","summary":" More Than Web Development ","title":"轉碼心得"},{"content":"哈嘍！歡迎來到Avocado和Sloth的共享博客，我們會在這個老巢嘰嘰乞乞（廣東話短語，約等於嘰嘰喳喳）生活裡的一切，包括且不限於轉碼心得，廚房故事，日常札記和萬物測評。有時候我們也會邀請一些朋友來共享這個空間，發布屬於ta們的作品，文字萬歲！\n🥑 Avocado (Tiffany): 女的，INFJ，著迷草木山海裡的每一種綠色，身份是家庭大廚\n🦥 Sloth (Raymond): 男的，INFP，痴迷足球和打機，身份是值得尊重的大師級廚房助手\n本站英文界面只包含英文內容，中文界面則會包含中英文在內的所有內容。 ","date":"4 November 2023","permalink":"/gigigatgat/zh-tw/","section":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬","summary":"哈嘍！歡迎來到Avocado和Sloth的共享博客，我們會在這個老巢嘰嘰乞乞（廣東話短語，約等於嘰嘰喳喳）生活裡的一切，包括且不限於轉碼心得，廚房故事，日常札記和萬物測評。有時候我們也會邀請一些朋友來共享這個空間，發布屬於ta們的作品，文字萬歲！\n🥑 Avocado (Tiffany): 女的，INFJ，著迷草木山海裡的每一種綠色，身份是家庭大廚\n🦥 Sloth (Raymond): 男的，INFP，痴迷足球和打機，身份是值得尊重的大師級廚房助手\n本站英文界面只包含英文內容，中文界面則會包含中英文在內的所有內容。 ","title":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬"},{"content":" Our Life and Thought Pieces ","date":"30 October 2023","permalink":"/gigigatgat/zh-tw/categories/life/","section":"分類","summary":" Our Life and Thought Pieces ","title":"日常札記"},{"content":" Let\u0026rsquo;s make blogging great again! 事情要從2023年8月，我偶然間讀到豆豉老師的 《2023 年了你为什么需要写博客》開始說起。雖然離我讀到這篇文章已經過去快3個月了，但我依然能想起讀完後那種熱血沸騰、想擼起袖子大幹一場的澎湃心情（。她分享的所有理由都說到了我的心坎裡，而且我也已經擁有讀寫代碼的基本能力，我覺得沒有理由不受這個號召行動起來。 建站是幾天時間就可以完成的任務，博客最大的挑戰是如何堅持輸出，保持這個空間的生命力。為此我想從自己的角度出發，重新梳理我寫博客的理由，激勵自己保持這個習慣。\n記錄是記憶的開瓶器 # 「你在2022年做了什麼？」Sean，我的一個Cambly tutor那天這樣問我。我當然說得出個大概：我工作、考雅思、申學校、辭職、申簽證、陪伴家人，這是我的2022年的主線。有行動力的一條主線，但很無聊。我更想記得那些細微的閃光的瞬間，那些來得快去得更快的思緒。這還是2022過去不久的情況，如果再問我「2021年做了什麼呢」，我恐怕只答得出「上班」。我本來就是個記性很差的人，我切實活過的日子、擁有的情感和蹦躂在腦海裡的想法就這樣被一年一年吞噬。時間越久，這些記憶的形狀就越模糊。 所以我決定記錄，記錄就像是把時間裝進瓶子裡的過程，讓有一天打開瓶蓋時它還能還鮮活如昔（點播一首Rebecca的Zeit in einer Flasche）。我不想辜負我認真活過的日子。如果它值得被記得，它就值得被記錄。\n一個閉上眼睛與自己對話的過程 # （真的閉上眼睛就打不了字了喂） 對我來說，寫個人博客和在社交媒體發帖的最大區別是前者更要求我與自己進行對話。在社交媒體發帖隨興隨意，想到什麼說什麼。寫博客卻需要我首先確立一個主題，重新思考我想表達什麼內容，如何組織我的語言。寫博客是一種儀式。 我不想去定義「博客應該是什麼樣的」，不同的人有不同的寫法。有的人靈光乍現就能流暢地寫出一篇博文，有的人整理總結每個月的社媒碎碎念又是一篇博文。博客未必需要太縝密的結構，但它一定涉及自我的整理和輸出，所以它至少是一個重新認識並塑造自己的過程。 過去這幾年我很懶，不僅在社交媒體的表達欲很低，私下的回顧與反思也很少，導致我的表達能力和生產效率明顯下降——光是寫這篇文就用了我將近一整天的時間！救命！我也不想失去我曾經引以為傲的對文字的感知力，所以寫博客也算是我的復健療法吧！\n我的地盤我做主 # 這大概是我選擇博客媒介最重要的理由了。在微博炸了四個號之後，我遷徙到了長毛象作為日常使用的社交媒體平台。長毛象很好，但它也有需要遵守的社區規則和自身的功能限制。我本身相熟的一些好友也因爲不了解或者不習慣長毛象的使用方式，無法與我保持日常的connection。 博客是更自由的。尤其是自建博客，它完完全全是我的空間，我可以決定它長什麼樣，有哪些功能；我可以無所顧忌地寫字，最小化自我審查的影響。同時它也是開放的。我要鏗鏘有力地在此申明：「在嘰嘰乞乞，你來去自由！」想起這兒了就順道做個客，沒想起來也完全不打緊。我的地盤我做主，什麼時候看你做主。\n共建博客宇宙 # 如果你只有我一個人的博客看，那可能怪無聊的。看的人很難養成看的習慣，寫的人也很難堅持寫下去。我喜歡上博客的其中一個原因是，博客自帶互聯網無邊界的特點，加上每個博客本身獨一無二的個性特質，探索或回訪一個博客的經歷都是珍貴而奇妙的，像在宇宙中發現一顆又一顆的星球。博客所反映出來的個人的創造力和生命力又是那樣強烈，我可以輕易從中獲得與人連結所產生的幸福感。而博客的內容又是不可預測的，它給閱讀者一個窺探寫作者生命體驗的機會，從而豐富、延展自身的生命體驗。 這一段怎麼那麼正經啊有點受不了了，總而言之，看大家的博客我很幸福！感謝堅持寫博客的每一位，我也想加入你們，成爲博客宇宙裡的一顆小小星球（並且當地主）。\n","date":"30 October 2023","permalink":"/gigigatgat/zh-tw/posts/why-blogging/","section":"博客","summary":"Let\u0026rsquo;s make blogging great again! 事情要從2023年8月，我偶然間讀到豆豉老師的 《2023 年了你为什么需要写博客》開始說起。雖然離我讀到這篇文章已經過去快3個月了，但我依然能想起讀完後那種熱血沸騰、想擼起袖子大幹一場的澎湃心情（。她分享的所有理由都說到了我的心坎裡，而且我也已經擁有讀寫代碼的基本能力，我覺得沒有理由不受這個號召行動起來。 建站是幾天時間就可以完成的任務，博客最大的挑戰是如何堅持輸出，保持這個空間的生命力。為此我想從自己的角度出發，重新梳理我寫博客的理由，激勵自己保持這個習慣。","title":"我為什麼開始寫博客"},{"content":" 譚仔——My comfort food all the time 在香港生活的時候想不到要吃什麼就會去譚仔（此處“譚仔”為“譚仔三哥”的簡稱，請勿與“譚仔雲南米線”混淆，三哥 is the best）吃米線，離開了之後掛念得最多的也是這一口。有一天無意間在YouTube上撞到一個 譚仔麻辣湯底食譜，試了之後也確實覺得有八分那個味兒，所以作為本站第一個菜譜隆重推薦給大家！\n寫在前面 # 米線的各種配菜你想吃什麼加什麼，不想吃什麼就從食譜裡減走什麼，沒那麼多所謂er。在此附上 譚仔官網餐牌供選擇困難症參考。\n製作湯底的材料中花椒油和淡奶是成就“譚仔味道”的點睛之筆，必不可少；辣椒粉的用量可以根據不同品牌不同產品的辛辣程度和你的吃辣水平酌情修改，請不要放成辣椒麵；豬肉精約等於豬骨濃湯寶，推薦家樂牌。\n食材準備 # 江西米粉 （推薦加拿大華超2.99$一包的江西米粉） 豬肉精 雞粉 辣椒粉 花椒油 淡奶（三花/黑白/雀巢都行） 糖/鹽 葷的配菜（雞肉/豬肉/牛肉/各種丸子/\u0026hellip;） 素的配菜（竹笙/腐皮/青菜/金針菇\u0026hellip;） 製作步驟 # 處理配菜 # 預先處理一些需要準備工序的配菜，如竹笙和腐皮需要提前泡發，加雞腿肉可能需要提前醃製炒熟，肥牛片可以單獨焯水撇除浮沫備用等等。 我個人很喜歡在米線裡加竹笙，但竹笙如果不好好處理就會有異味，可以參考我最經常使用的這個 泡發竹笙的方法。簡而言之就是去頭去尾去傘狀物，剪成段後加清水白醋鹽反覆浸泡三次左右。不加白醋只加鹽也可以，適當增加浸泡的時間，最後一次浸泡用清水再清洗一次。 煮米線 # 煮一鍋開水，水開之後下一把米線（食指抵拇指握起來虎口剛剛好一圈是我家兩個人吃的量）煮五分鐘，不時攪拌防止粘鍋。煮差不多後撈出來過一遍涼水備用。\n煮湯底 # 用一個乾淨的鍋重新煮一鍋水，水滾後轉中火下一顆豬肉精化開，一湯匙雞粉，半湯匙鹽和糖，再憑個人喜好下一至兩湯匙辣椒粉、花椒油、淡奶。攪拌均勻後可以嚐下味道再調整鹹淡。 以上是兩人份的水量和調料量。 下配菜及米線 # 先下需要久煮或者耐煮的配菜，如竹笙/牛丸/豆泡等，煮夠時間後再放易熟的其它配菜，如青菜/腐皮等。米線什麼時候放取決於你希望它軟爛或者勁道的程度，通常我會和易熟的配菜一起放。\n寫在後面 # 這款米線做熟練了之後是名副其實的快手菜：配菜這一步驟完全可以提前預備，用密封袋分裝放在冰箱冷凍層隨取隨用；煮米線和煮湯底可以同時進行，反正米線最後才放。這樣下來預計15-30分鐘就可以享用家庭版譚仔米線啦！Enjoy！ （譚仔我最喜歡的湯底是煳辣口味，但至今未能一解煳辣湯底配方之謎。在此鄭重懸賞煳辣配方線索，歡迎有志之士嘗試探索！）\n","date":"27 October 2023","permalink":"/gigigatgat/zh-tw/posts/tamjai-samgor-rice-noodle/","section":"博客","summary":"譚仔——My comfort food all the time 在香港生活的時候想不到要吃什麼就會去譚仔（此處“譚仔”為“譚仔三哥”的簡稱，請勿與“譚仔雲南米線”混淆，三哥 is the best）吃米線，離開了之後掛念得最多的也是這一口。有一天無意間在YouTube上撞到一個 譚仔麻辣湯底食譜，試了之後也確實覺得有八分那個味兒，所以作為本站第一個菜譜隆重推薦給大家！","title":"在加國，復刻一碗香港經典譚仔三哥米線"},{"content":"","date":"27 October 2023","permalink":"/gigigatgat/zh-tw/tags/%E7%B1%B3%E7%B7%9A/","section":"標籤","summary":"","title":"米線"},{"content":"","date":"27 October 2023","permalink":"/gigigatgat/zh-tw/tags/%E9%A6%99%E6%B8%AF/","section":"標籤","summary":"","title":"香港"},{"content":" Food Made in Our Home ","date":"27 October 2023","permalink":"/gigigatgat/zh-tw/categories/kitchen/","section":"分類","summary":" Food Made in Our Home ","title":"廚房故事"},{"content":"其實我也沒那麼懶。\n","date":"26 October 2023","permalink":"/gigigatgat/zh-tw/authors/sloth/","section":"作者","summary":"其實我也沒那麼懶。","title":"Sloth (Raymond)"},{"content":"嗨！我們是 Avocado 和 Sloth，生活搭子，現居加拿大渥太華，都是半路出家轉碼大軍中的一員，學的是 Web Development。\nAvocado\n女的，INFJ 從哪裡來不重要，地球就是我的根和天地 關心女性/人權/政治/兩岸三地，也關心自己的生活 修煉中的大廚；寶可夢訓練家；不定期出沒劇院；還沒開始研究植物的植物愛好者 學過英語廣東話德語，正在學法語和日語，但是連家鄉方言在內沒一個真的講得流暢無阻的；心酸又努力的典型代表（已經很棒了！） 目前最想做的事：考出駕照；在家種菜；練大肌肉 Sloth 男的，INFP 來自香港 熱衷歷史/政治/社會學，極端福利資本主義者 失憶症患者；偶發性超強矛盾複合體 受訓中的大廚助理，但自問天分較現任大廚高（我呸） 一台能上網且配置足夠應付WOW的電腦，就可以讓我足不出戶 人生目標：盡早退休 ","date":"26 October 2023","permalink":"/gigigatgat/zh-tw/about/","section":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬","summary":"嗨！我們是 Avocado 和 Sloth，生活搭子，現居加拿大渥太華，都是半路出家轉碼大軍中的一員，學的是 Web Development。\nAvocado\n女的，INFJ 從哪裡來不重要，地球就是我的根和天地 關心女性/人權/政治/兩岸三地，也關心自己的生活 修煉中的大廚；寶可夢訓練家；不定期出沒劇院；還沒開始研究植物的植物愛好者 學過英語廣東話德語，正在學法語和日語，但是連家鄉方言在內沒一個真的講得流暢無阻的；心酸又努力的典型代表（已經很棒了！） 目前最想做的事：考出駕照；在家種菜；練大肌肉 Sloth 男的，INFP 來自香港 熱衷歷史/政治/社會學，極端福利資本主義者 失憶症患者；偶發性超強矛盾複合體 受訓中的大廚助理，但自問天分較現任大廚高（我呸） 一台能上網且配置足夠應付WOW的電腦，就可以讓我足不出戶 人生目標：盡早退休 ","title":"關於我們"},{"content":"","date":"24 October 2023","permalink":"/gigigatgat/zh-tw/tags/asp.net/","section":"標籤","summary":"","title":"ASP.NET"},{"content":" Entity Framework Core is a powerful tool for simplifying database integration with web applications. In this article, we\u0026rsquo;ll gain a basic understanding of Entity Framework Core and demonstrate how it streamlines the process of connecting databases to your web pages. You\u0026rsquo;ll also find step-by-step instructions to help you get started, regardless of whether you\u0026rsquo;re a Windows or Mac user. Since I\u0026rsquo;m a Mac user, most of the screenshots in this tutorial will be from a Mac system.\nWhat is Entity Framework Core? # Entity Framework Core (EF Core) is an open-source and lightweight framework developed by Microsoft. It is widely used in .NET applications to help developers interact with relational databases and convert data into entity classes in a more object-oriented manner. This tool also enables automatic generation of Razor pages with accessible data and default layout settings. You can install EF Core on NuGet public domain to your web application projects in Visual Studio.\nPrerequisites # Installed Visual Studio and MySql Workbench Connect to local instance in MySql and ensure the server status is Running A populated database to be converted to classes and displayed on web pages In my case, I created a new scheme named StudentRecord and ran the sql file StudentRecordDBBuilder.MySQL.sql to populate it Basic knowledge about ASP.NET and Razor Page Procedures # 1. Create a new ASP.NET Razor Page web application project in Visual Studio # Choose the Web Application template for creating an ASP.NET Core application with example ASP.NET Razor Page content Select .NET 7.0 as the targeted frame Uncheck Configure for HTTPS Name the project and solution as you prefer, and place the folder in a location that best suits you 2. Install Microsoft Entity Framework Core # Right click on the project folder and select Manage NuGet Packages Select Browse tab, and select nuget.org as the package source. Search and install the following three packages to the project. You may need to click Accept if a License Acceptance window pops up. MySql.EntityFrameworkCore Microsoft.EntityFrameworkCore.Tools Microsoft.VisualStudio.Web.CodeGeneration.Design Double check whether these three packages are installed successfully by expanding the project’s Dependencies and Packages or browsing the Installed tab in the NuGet Packages Manager\u0026rsquo;s window 3. Generate the entity classes from the database # Create a folder DataAccess in the project to contain the generated classes for MacOS # Select Show Terminal Window from Tools in the menu if the terminal window is hiding Run the following commands in the VS terminal window: to create a new Tool Manifest: dotnet new tool-manifest to install dotnet-ef: dotnet tool install dotnet-ef to make the dotnet-ef command available: dotnet tool restore to generate classes for each tables in the database and the DataContext class: dotnet dotnet-ef dbcontext Scaffold \u0026quot;Server=localhost; User ID=root; Password=yourPassword; Database=yourDatabaseName\u0026quot; MySql.EntityFrameworkCore -o DataAccess for Windows # Select NuGet Package Manager from Tools in the menu and start NuGet Package Manager Console Run the following command with your own credentials: Scaffold-DbContext “Server=localhost; User ID=root; Password=yourPassword; Database=yourDatabaseName” MySql.EntityFrameworkCore -o DataAccess Remember to use your own credentials in the Scaffold command instead of copying and pasting! By finishing the above steps, the Entity Framework scaffold tool will generate a set of class files in the DataAccess folder 4. Modify the DB connection string for security concerns # Add a ConnectionStrings section with one connection string using the same name of your database in the application’s configuration file appsetting.json Remove the hardcoded connection string in the DB Context Class file, e.g. StudentRecordContext.cs 5. Register the DB Access Service with the Application # In the Program.cs file, add the following statements to the beginning: using Microsoft.EntityFrameworkCore; using \u0026lt;ProjectName\u0026gt;.DataAccess; In the same file, add the following codes after builder.Services.AddRazorPages( ): string dbConnStr = builder.Configuration.GetConnectionString(\u0026#34;StudentRecord\u0026#34;); if (dbConnStr != null) { builder.Services.AddDbContext\u0026lt;StudentRecordContext\u0026gt;( options =\u0026gt; options.UseMySQL(dbConnStr)); } Select Rebuild Solution from Build in the menu and ensure that the solution build successfully 6. Generate Razor pages using Entity Framework (CRUD) # Add a new folder inside the Pages folder, right click on the folder and select Add \u0026gt; New Scaffolding Select Razor Pages using Entity Framework (CRUD) and choose the corresponding model class and data context class you\u0026rsquo;d like to apply By finishing the above steps, the CRUD Razor pages are already generated inside the folder 7. Review and modify the pages according to your needs # In the _Layout.cshtml page, add menu items in the navbar to access the newly generated pages from the index page Run the application and view the pages in browser Common Errors # Debugging is a common practice in application development. One of my biggest challenges in this project is running the Scaffold command. I\u0026rsquo;ve listed a few errors that I encountered and their respective solutions below.\n1. Unable to find provider assembly \u0026lsquo;MySql.EntityFrameworkCore\u0026rsquo; # I re-installed \u0026lsquo;MySql.EntityFrameworkCore\u0026rsquo; with a different version(7.0.5) and forgot to update it. Rebuild the solution will solve this issue.\n2. Missing required argument \u0026lsquo;\u0026lt;Provider\u0026gt;\u0026rsquo; # Double-check the quotation marks in the command. In my case, I mistakenly used Chinese quotation marks.\n3. Authentication to host \u0026rsquo;localhost\u0026rsquo; for user \u0026lsquo;root\u0026rsquo; using method \u0026lsquo;caching_sha2_password\u0026rsquo; failed with message: access denied for user \u0026lsquo;root\u0026rsquo;@\u0026rsquo;localhost\u0026rsquo; (using password: yes) # If you are absolutely certain that you are using the correct password, it\u0026rsquo;s likely that a special character in the password is causing confusion in the terminal/console. You can change the password to a simpler one or create a new temporary user with all privileges and try again.\nCredit # This blog is inspired from a lab assignment of the course CST8256 Web Programming Language I, with an original instruction written by Wei Gong.\n","date":"24 October 2023","permalink":"/gigigatgat/zh-tw/posts/how-to-use-entity-framework-core/","section":"博客","summary":"Entity Framework Core is a powerful tool for simplifying database integration with web applications.","title":"Getting Started with Entity Framework Core in Visual Studio"},{"content":"","date":"24 October 2023","permalink":"/gigigatgat/zh-tw/tags/visualstudio/","section":"標籤","summary":"","title":"VisualStudio"},{"content":"","date":"1 January 0001","permalink":"/gigigatgat/zh-tw/series/","section":"Series","summary":"","title":"Series"},{"content":"每次造訪友鄰的博客我都感到幸福，請大家也幸福一下。如果你碰巧有自己的博客，歡迎和我交換鏈接；如果你有想產出的內容而沒有平台，也歡迎向嘰嘰乞乞投稿喔！\n椒鹽豆豉：日常產出驚人的互聯網友人，復興部落格的先行者兼推動者 第三夏爾：第三宇宙中的具象生活，擁有全宇宙最好看的每月小結 豚骨拉麵館：拉麵館老闆娘，非常喜歡她的菜譜系列 D同學：人類社會的忠實觀察員與執筆者 Meiyue：東京風物記事 呼貓護衛：有一片廣袤的精神世界 ","date":"1 January 0001","permalink":"/gigigatgat/zh-tw/friends/","section":"歡迎光臨嘰嘰乞乞/GiGiGatGat! 💬","summary":"每次造訪友鄰的博客我都感到幸福，請大家也幸福一下。如果你碰巧有自己的博客，歡迎和我交換鏈接；如果你有想產出的內容而沒有平台，也歡迎向嘰嘰乞乞投稿喔！\n椒鹽豆豉：日常產出驚人的互聯網友人，復興部落格的先行者兼推動者 第三夏爾：第三宇宙中的具象生活，擁有全宇宙最好看的每月小結 豚骨拉麵館：拉麵館老闆娘，非常喜歡她的菜譜系列 D同學：人類社會的忠實觀察員與執筆者 Meiyue：東京風物記事 呼貓護衛：有一片廣袤的精神世界 ","title":"友情鏈接"},{"content":" Books, Games, Music, Movies, Dramas, and Things ","date":"1 January 0001","permalink":"/gigigatgat/zh-tw/categories/review/","section":"分類","summary":" Books, Games, Music, Movies, Dramas, and Things ","title":"萬物測評"}]